{"title":"3등 항공사의 생존 전략","markdown":{"yaml":{"title":"3등 항공사의 생존 전략","title-slide-attributes":{"data-background-image":"./images/expressjet_airlines_cover.jfif","data-background-size":"cover","data-background-opacity":"0.28"},"subtitle":"ExpressJet(EV)","author":"2조 - 윤희재, 박소영, 윤해진, 이우영, 이유진","format":"revealjs"},"headingText":"Contents","containsRefs":false,"markdown":"\n\n1. 주제 도출 과정\n2. ExpressJet(EV) 항공사 분석 내용\n3. 지연 원인 분석\n4. 해결 방안 및 전략\n\n\n## 주제 도출 과정\n\n1. 분석 과정\n\n    - 데이터 전처리^[데이터 전처리 I.시간 순으로 날짜 재정렬 II. 결측지 제거 -> 지연 시간을 명확히 정할 수 있는 데이터만 활용] \n    - 지연 시간이 15분 이상인 데이터만 필터링<br>\n    \n```{python}\n#|echo : false\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nycflights13 as flights\nimport matplotlib.font_manager as fm\n\nfont_path = r\"C:\\Windows\\Fonts\\malgun.ttf\"\nfm.fontManager.addfont(font_path)\nfont_name = fm.FontProperties(fname=font_path).get_name()\n\nplt.rcParams['font.family'] = font_name\nplt.rcParams['axes.unicode_minus'] = False\n\ndf_flights = flights.flights\ndf_airlines = flights.airlines\ndf_airports = flights.airports\ndf_planes = flights.planes\ndf_weather = flights.weather\n##################################################################################################\n## 데이터 전처리\n\n# 결측치 제거\nflights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\nflights_cleaned.shape # (327346, 19)\n\n# flights_cleanded와 df_planes merge ( key = tailnum )\nflights_cleaned = pd.merge(flights_cleaned,df_planes,on='tailnum',how='left')\n\n# 시간순으로 날짜 재정렬\nflights_cleaned.sort_values(['month', 'day'], inplace=True)\nflights_cleaned = flights_cleaned.reset_index(drop=True) # 인덱스 초기화\n\n# 15분 이상 지연된 항공편만 따로 데이터 프레임 생성 \nflights_delay = flights_cleaned[flights_cleaned['dep_delay']>=15]\nflights_delay = flights_delay.reset_index(drop=True)\nflights_delay\n\nflights_cleaned['month_day_time'] = pd.to_datetime({\n    'year': df_flights['year'],\n    'month': df_flights['month'],\n    'day': df_flights['day'],\n    'hour': df_flights['hour'],\n    'minute': df_flights['minute']\n})\n\n# 월별 분석\nUA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\nB6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n\n```\n\n\n```{python}\n#|echo : false\n# 항공사별 운항 수 집계\ncarrier_counts = df_flights['carrier'].value_counts().reset_index()\ncarrier_counts.columns = ['carrier', 'total_flights']\n\n# 항공사 이름 붙이기\ncarrier_counts = carrier_counts.merge(df_airlines, on='carrier', how='left')\n\n# 색상 매핑\ndef assign_color(carrier):\n    if carrier == 'EV':\n        return 'red'\n    elif carrier in ['UA', 'B6']:\n        return 'blue'\n    else:\n        return 'gray'\n\ncarrier_counts['color'] = carrier_counts['carrier'].apply(assign_color)\n\n# 시각화\nplt.figure(figsize=(13, 6))\nbars = plt.bar(\n    carrier_counts['carrier'],\n    carrier_counts['total_flights'],\n    color=carrier_counts['color']\n)\n\n# 레이블 및 제목\nplt.title('항공사별 연간 운항량', fontsize=16, weight='bold')\nplt.xlabel('항공사 코드')\nplt.ylabel('총 운항편 수')\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n```\n\n\n---\n\n- 항공사별 / 제조사별/ 공항별 지연시간에 명확한 차이가 있음을 확인 <br>\n\n::: {.panel-tabset}\n\n### 항공사별\n\n::::: columns\n::: {.column width=\"50%\"}\n\n```{python}\n\nflight_counts = flights_cleaned['carrier'].value_counts().reset_index() # UA B6 EV\n\n# 3사의 공항에 따른 지연율\n# 분석 대상 항공사\nselected_carriers = ['UA', 'B6', 'EV']\nflights_cleaned = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n\n# 3사 지연율 및 평균 계산 > summary_big3를 통해서 3사 중 EV의 지연율이 특출나게 높은 것을 확인할 수 있음\nsummary_big3 = flights_cleaned.groupby('carrier').apply(\n    lambda g: pd.Series({\n        'total_flights': len(g),\n        'delayed_flights': (g['dep_delay'] >= 15).sum(),\n        'delay_rate (%)': round((g['dep_delay'] >= 15).mean() * 100, 2),\n        'avg_delay (min)': round(g[g['dep_delay'] >= 15]['dep_delay'].mean(), 2)\n    })\n).reset_index()\nsummary_big3 = summary_big3.sort_values(\"total_flights\", ascending=False)\nsummary_big3 \n\n##################################################################################\n######################################################################################\n## 전체 항공사 별 지연율 비교 시각화\n####################################################################################\n#############################################################\n\nbar_colors = ['#d62728' if c == 'EV' else '#1f77b4' for c in summary_big3['carrier']]\n\nplt.figure(figsize=(6,5))\nsns.barplot(data=summary_big3, x='carrier', y='delay_rate (%)', palette=bar_colors)\n\nplt.title('항공사별 출발지연 비율(%)', fontsize=18, fontweight='bold')   # 제목 크기 키움 + 볼드체\nplt.xlabel('항공사', fontsize=14, fontweight='bold')              # x축 라벨 크기 키움 + 볼드체\nplt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')       # y축 라벨 크기 키움 + 볼드체\n\n# x축 항공사 이름 (눈금 레이블) 볼드체, 크기 14\nplt.xticks(fontsize=14, fontweight='bold')\n\nfor i, rate in enumerate(summary_big3['delay_rate (%)']):\n    plt.text(i, rate + 0.5, f'{rate}%', ha='center', va='bottom', fontsize=13, fontweight='bold')  # 텍스트 크기 키움 + 볼드체\n\nplt.ylim(0, summary_big3['delay_rate (%)'].max() + 5)\nplt.tight_layout()\nplt.show()\n```\n\n:::\n::: {.column width=\"50%\"}\n\n- 항공편 수 기준 상위 3개 항공사 비교\n- EV 항공사가 다른 항공사들에 비해 출발 지연 비율이 높음\n- 특히, 3등 항공사(EV)의 지연율과 1, 2등 항공사의 지연율에서 가장 큰 차이를 보임 <br>\n    - 해당 원인을 찾기 위해 분석을 진행\n:::\n:::::\n\n### 공항별\n\n::::: columns\n::: {.column width=\"60%\"}\n\n```{python}\n# 전체 항공편 수 (공항별)\ntotal_flights = flights_cleaned.groupby('origin').size().reset_index(name='total_flights')\n\n# 15분 이상 지연된 항공편 수 (공항별)\ndelayed_flights = flights_cleaned[flights_cleaned['dep_delay'] >= 15]\ndelayed_counts = delayed_flights.groupby('origin').size().reset_index(name='delayed_flights')\n\n# 비율 계산\ndelay_ratio = pd.merge(total_flights, delayed_counts, on='origin', how='left')\ndelay_ratio['delayed_flights'] = delay_ratio['delayed_flights'].fillna(0)\ndelay_ratio['delay_rate'] = delay_ratio['delayed_flights'] / delay_ratio['total_flights']\ndelay_ratio = delay_ratio.sort_values('delay_rate', ascending=False)\n\n# 시각화\nplt.figure(figsize=(10, 6))\nsns.barplot(data=delay_ratio, x='origin', y='delay_rate', color='#1f77b4')\n\n# 타이틀 및 축 설정\nplt.title('공항별 출발 지연 비율 (15분 이상 지연 기준)', fontsize=18, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')\n\n# 막대 위에 수치 표시 (퍼센트 형식)\nfor i, value in enumerate(delay_ratio['delay_rate']):\n    plt.text(i, value + 0.002, f'{value*100:.1f}%', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# 폰트 및 범위 조정\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\nplt.ylim(0, delay_ratio['delay_rate'].max() + 0.02)\nplt.tight_layout()\nplt.show()\n\n```\n\n:::\n::: {.column width=\"40%\"}\n\n- 설명\n\n:::\n:::::\n\n:::\n\n\n::: {.notes}\n\n[“출발 시간(dep_time)과 출발 지연(dep_delay)이 동시에 결측인 경우, 항공편이 실제로 이륙하지 않은 것으로 간주했습니다. 이는 일반적으로 결항(Canceled)된 항공편으로 판단되며, 우리는 실제 운항된 항공편의 지연만 분석하고자 했기 때문에 해당 데이터를 제거했습니다.”]\n\n:::\n\n## ExpressJet(EV) 항공사 분석 내용 {.scrollable}\n\n1. 항공사 별 제조사 비교<br>\n\n### EV\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('EV')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('EV 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n### UA\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('UA')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('UA 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n### B6\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('B6')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('B6 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n---\n\n### 제조사별 평균 좌석 수 비교\n\n```{python}\n\n# 주요 제조사\nmajor_manufacturers = ['BOEING', 'EMBRAER', 'AIRBUS', 'MCDONNELL DOUGLAS']\n\n# 평균 좌석 수 계산\nif 'avg_seats' not in plane_features.columns:\n    avg_seats_by_mfg = (\n        big3.dropna(subset=['manufacturer', 'seats'])\n        .groupby('manufacturer')['seats']\n        .mean()\n        .reset_index()\n    )\nelse:\n    avg_seats_by_mfg = plane_features.groupby('manufacturer')['avg_seats'].mean().reset_index()\n\n# 주요 제조사만 필터링\navg_seats_by_mfg = avg_seats_by_mfg[avg_seats_by_mfg['manufacturer'].isin(major_manufacturers)]\n\n# 색상 설정\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in avg_seats_by_mfg['manufacturer']]\n\n# 시각화\nplt.figure(figsize=(8, 6))\nbars = plt.bar(\n    avg_seats_by_mfg['manufacturer'],\n    avg_seats_by_mfg['seats'] if 'seats' in avg_seats_by_mfg.columns else avg_seats_by_mfg['avg_seats'],\n    color=colors\n)\n\n# 타이틀 & 축 설정\nplt.title('제조사별 평균 좌석 수 비교', fontsize=18, fontweight='bold')\nplt.xlabel('제조사', fontsize=14, fontweight='bold')\nplt.ylabel('평균 좌석 수', fontsize=14, fontweight='bold')\n\n# 제조사 이름 글꼴 키우고 볼드 처리\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\n# 막대 위에 수치 표시\nfor bar in bars:\n    height = bar.get_height()\n    x = bar.get_x() + bar.get_width() / 2\n    plt.text(x, height + 2, f'{height:.0f}개', ha='center', va='bottom', fontsize=14, fontweight='bold')\n\nplt.ylim(0, max([bar.get_height() for bar in bars]) + 20)\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n---\n\n### 항공사별 평균 좌석 수\n```{python}\n\n# 각 항공사별 평균 좌석수 시각화\n# 색상 고정\ncarrier_colors = {\n    'EV': '#d62728',   # Red\n    'UA': '#1f77b4',   # Blue\n    'B6': '#1f77b4'    # Green\n}\n\n# 정렬\navg_seats_sorted = avg_seats.sort_values(by='avg_seats', ascending=False).reset_index(drop=True)\n\n# 색상 리스트 생성\nbar_colors = [carrier_colors.get(carrier, 'gray') for carrier in avg_seats_sorted['carrier']]\n\n# 시각화\nplt.figure(figsize=(9, 6))\nbars = sns.barplot(data=avg_seats_sorted, x='carrier', y='avg_seats', palette=bar_colors)\n\n# 수치 텍스트 박스 추가\nfor bar, value in zip(bars.patches, avg_seats_sorted['avg_seats']):\n    bars.annotate(f\"{value:.1f}\",\n                  (bar.get_x() + bar.get_width() / 2, bar.get_height()),\n                  ha='center', va='bottom',\n                  fontsize=13, fontweight='bold',\n                  bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.5))\n\n# 제목과 라벨\nplt.title(\"항공사별 평균 좌석 수\", fontsize=18, weight='bold')\nplt.xlabel(\"항공사\", fontsize=13)\nplt.ylabel(\"평균 좌석 수\", fontsize=13)\nplt.ylim(0, avg_seats_sorted['avg_seats'].max() + 30)\n\n# 범례 수동 추가\ncustom_labels = [plt.Rectangle((0,0),1,1, color=carrier_colors[c]) for c in avg_seats_sorted['carrier']]\nplt.legend(custom_labels, avg_seats_sorted['carrier'], title=\"항공사\", loc='upper right')\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n---\n\n### EV 항공사 기체 좌석 수\n```{python} \n\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\nEV_flight=EV_total[['carrier','distance','air_time']]\n#ev 항공사 기체 촤석 분포\n# 한글 폰트 설정 (Windows 기준)\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False\n\n# EV 항공사 좌석 정보 준비\nEV_seats = EV_total[['seats']].dropna()\n\n# 좌석 구간 설정\nbins = [0, 50, 70, 90, 110, 130, 150, float('inf')]\nlabels = ['~50석', '51~70석', '71~90석', '91~110석', '111~130석', '131~150석', '151석 이상']\nEV_seats['좌석구간'] = pd.cut(EV_seats['seats'], bins=bins, labels=labels, right=False)\n\n# 좌석 구간별 비율 계산\nseat_distribution = (\n    EV_seats['좌석구간']\n    .value_counts(normalize=True)\n    .sort_index() * 100\n)\n\n# 시각화\nplt.figure(figsize=(10, 6))\ncolors = sns.color_palette('pastel', len(seat_distribution))\nbarplot = sns.barplot(x=seat_distribution.index, y=seat_distribution.values, palette=colors)\n\n# y축 범위 명시적으로 지정 (최대 100)\nplt.ylim(0, 100)\n\n# 제목 및 축 설정\nplt.title('EV 항공사 기체 좌석 수 분포', fontsize=16, fontweight='bold')\nplt.xlabel('좌석 수 구간', fontsize=12)\nplt.ylabel('비율 (%)', fontsize=12)\n\n# 수치 라벨 (막대 위에 충분히 띄워서)\nfor i, value in enumerate(seat_distribution.values):\n    plt.text(i, value + 2, f'{value:.1f}%', ha='center', va='bottom', fontsize=10)\n\nplt.tight_layout()\nplt.show()\n\n```\n\n\n\n::: {.notes}\n\n:::\n\n---\n\n\n2. 비행 거리 비교: 단/중/장 거리 비교<br>\n\n```{python}\n\n# 1. UA , 57782\n# distance, air_time 확인\nUA_flight=UA_total[['carrier','distance','air_time']]\nUA_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\n# distance는 내림차순, air_time은 오름차순으로 정렬( 동일한 거리에서 시간이 짧을 수록 비행 good)\nUA_flight.describe()\n\n# 2. B6, 54049\n# distance, air_time 확인\nB6_flight= B6_total[['carrier','distance','air_time']]\nB6_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\nB6_flight.describe()\n\n# 3. EV, 51108\n# distance, air_time 확인\nEV_flight=EV_total[['carrier','distance','air_time']]\nEV_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\nEV_flight.describe()\n\n'''\nUnited Airline\n700 mile 미만 -> short \n700 mile 이상 3000 mile 미만 -> medium\n3000 mile 이상 -> long\n'''\n\n# 상위 항공사 3개를 합친 새로운 DataFrame 생성\ntop3_flights = pd.concat([UA_flight, B6_flight, EV_flight], ignore_index=True)\n\n# 길이 (mile) 에 따른 기준 생성\ndef categorize_distance(mile):\n    if mile < 700:\n        return 'short'\n    elif mile < 3000:\n        return 'medium'\n    else:\n        return 'long'\n    \n# length라는 새 column을 만들어 거리를 비교    \ntop3_flights['length'] = top3_flights['distance'].apply(categorize_distance)    \n\n# pivot table 생성\npivot_flight = pd.pivot_table(\n    top3_flights,\n    index='carrier',\n    columns='length',\n    values='distance',      \n    aggfunc='count',\n    fill_value=0\n).reset_index()\npivot_flight.columns.name = None\npivot_flight = pivot_flight[['carrier', 'short', 'medium', 'long']]\npivot_flight \n##############################################################3\n# 항공사별 단거리 중거리 장거리 시각화\n#########################################################\n# 거리별 총합을 기준으로 비율 계산\ndistance_ratio = pivot_flight.copy()\ntotal = distance_ratio[['short', 'medium', 'long']].sum(axis=1)\ndistance_ratio['short_ratio'] = (distance_ratio['short'] / total * 100).round(2)\ndistance_ratio['medium_ratio'] = (distance_ratio['medium'] / total * 100).round(2)\ndistance_ratio['long_ratio'] = (distance_ratio['long'] / total * 100).round(2)\n\n# melt해서 long-form으로 변환\ndistance_ratio_melted = pd.melt(\n    distance_ratio,\n    id_vars='carrier',\n    value_vars=['short_ratio', 'medium_ratio', 'long_ratio'],\n    var_name='distance_group',\n    value_name='비율'\n)\n\n# distance_group 한글 라벨 정리\ndistance_ratio_melted['distance_group'] = distance_ratio_melted['distance_group'].map({\n    'short_ratio': '단거리',\n    'medium_ratio': '중거리',\n    'long_ratio': '장거리'\n})\n\n# 시각화\nplt.figure(figsize=(10, 6))\nax = sns.barplot(data=distance_ratio_melted, x='carrier', y='비율', hue='distance_group')\n\n# 막대 위에 비율 표시\nfor container in ax.containers:\n    for bar in container:\n        height = bar.get_height()\n        if height > 0:\n            ax.text(\n                bar.get_x() + bar.get_width() / 2,\n                height + 0.5,\n                f'{height:.1f}%',\n                ha='center',\n                va='bottom',\n                fontsize=9\n            )\n\nplt.title('항공사별 거리 구간별 항공편 비율 (%)', fontsize=15, fontweight='bold')\nplt.xlabel('항공사')\nplt.ylabel('항공편 비율 (%)')\nplt.legend(title='비행 거리 구간')\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n\n\n```\n\n---\n\n3. 공항별 지연 비교: 출발 공항 3군데에 대해서 항공사의 지연 분석<br>\n<공항별 항공사 평균 출발 지연시간(분)>\n\n```{python}\n\n# 1. 세 항공사만 필터링\nselected_carriers = ['UA', 'B6', 'EV']\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n\n# 2. 전체 항공편 수 (carrier + origin 기준)\ntotal_counts = (\n    big3.groupby(['carrier', 'origin'])\n    .size()\n    .reset_index(name='total_flights')\n)\n\n# 3. 15분 이상 지연된 항공편만 필터링\nbig3_delay = big3[big3['dep_delay'] >= 15]\n\n# 4. 지연된 항공편 수 (carrier + origin 기준)\ndelay_counts = (\n    big3_delay.groupby(['carrier', 'origin'])\n    .size()\n    .reset_index(name='delay_count')\n)\n\n# 5. 평균 지연 시간 (기존 코드 유지)\nairport_delay = (\n    big3_delay.dropna(subset=['dep_delay'])\n    .groupby(['carrier', 'origin'])['dep_delay']\n    .mean()\n    .reset_index()\n)\n##\n# 6. total_flights와 delay_count를 airport_delay에 merge\nairport_delay = pd.merge(airport_delay, total_counts, on=['carrier', 'origin'], how='left')\nairport_delay = pd.merge(airport_delay, delay_counts, on=['carrier', 'origin'], how='left')\n\n# 7. 결측값 처리 및 지연 비율 계산\nairport_delay['delay_count'] = airport_delay['delay_count'].fillna(0)\nairport_delay['delay_ratio'] = airport_delay['delay_count'] / airport_delay['total_flights']\n\n# 8. carrier 순서 정렬\ncarrier_order = ['UA', 'B6', 'EV']\nairport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n\n# 9. 공항 이름 붙이기 (origin -> 공항명)\nairport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\nairport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')\n######################################################################3\n######################################################################\n###############################################################################3\n##################################################################################3\n\n# 각 공항별 항공사 지연 시간 시각화\n# carrier별 색상 딕셔너리 (EV 빨강, 나머지 파랑)\npalette_dict = {\n    'EV': '#d62728',\n    'UA': '#1f77b4',\n    'B6': '#1f77b4',\n}\n\nplt.figure(figsize=(12, 7))\nbarplot = sns.barplot(\n    data=airport_delay,\n    x='origin',\n    y='dep_delay',   # 평균 지연 시간 컬럼명으로 맞춰주세요\n    hue='carrier',\n    palette=palette_dict\n)\n\nplt.title('공항별 항공사 평균 출발 지연 시간 (분)', fontsize=20, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=16, fontweight='bold')\nplt.ylabel('평균 지연 시간 (분)', fontsize=16, fontweight='bold')\n\n# 막대 위에 지연 시간 표시 (0보다 클 때만)\nfor p in barplot.patches:\n    height = p.get_height()\n    if height > 0:\n        plt.text(\n            p.get_x() + p.get_width()/2,\n            height + 0.5,\n            f'{height:.1f}분',\n            ha='center',\n            va='bottom',\n            fontsize=14,\n            fontweight='bold'\n        )\n\nplt.legend(title='항공사', title_fontsize=14, fontsize=12)\nplt.xticks(fontsize=14, fontweight='bold')\nplt.yticks(fontsize=14)\nplt.tight_layout()\nplt.show()\n# 원하는 carrier 순서로 지정\ncarrier_order = ['UA', 'B6', 'EV']\nairport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n\n# 공항 이름 붙이기 (origin code -> 공항명)\nairport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\nairport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')\n\n```\n\n\n---\n\n4. 월별 지연 파악 <br>\n\n```{python}\n\n# 월별 분석\nUA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\nB6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n\n# 전체 데이터 통계\ntotal_group = flights_cleaned.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# 전체 결항 데이터 통계 \ndelay_group = flights_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# 전체 데이터 통계 데이터 total_group에 월 별 지연 비율 추가\ntotal_group['delay_ratio'] = delay_group['count'] / total_group['count']\n\n# UA 전체 데이터 통계 \nUA_total_group = UA_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# UA 결항 데이터 통계 \nUA_delay = UA_total[UA_total['dep_delay']>15].reset_index(drop=True)\nUA_delay_group = UA_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# UA 전체 데이터 통계 데이터 UA_total_group에 월 별 지연 비율 추가\nUA_total_group['delay_ratio'] = UA_delay_group['count'] / UA_total_group['count']\n\n# B6 전체 데이터 통계 \nB6_total_group = B6_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# B6 결항 데이터 통계 \nB6_delay = B6_total[B6_total['dep_delay']>15].reset_index(drop=True)\nB6_delay_group = B6_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# B6 전체 데이터 통계 데이터 B6_total_group에 월 별 지연 비율 추가\nB6_total_group['delay_ratio'] = B6_delay_group['count'] / B6_total_group['count']\n\n# EV 전체 데이터 통계 \nEV_total_group = EV_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# EV 결항 데이터 통계 \nEV_delay = EV_total[EV_total['dep_delay']>15].reset_index(drop=True)\nEV_delay_group = EV_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# EV 전체 데이터 통계 데이터 EV_total_group에 월 별 지연 비율 추가\nEV_total_group['delay_ratio'] = EV_delay_group['count'] / EV_total_group['count']\n\n###################################################################################\n###################################################################################\n#######################################################################################\n# 월별 운항 횟수 시각화\n########################################################################\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\n# 데이터\nlabels = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\nEV_counts = [4300, 4150, 4500, 4600, 4550, 4600, 4700, 4750, 4540, 4810, 4600, 4380]\nB6_counts = [4400, 4200, 4700, 4650, 4580, 4550, 4900, 4940, 4700, 4700, 4630, 4650]\nUA_counts = [4500, 4350, 4600, 4610, 4590, 4550, 4920, 4900, 4800, 4750, 4700, 4390]\nTotal_counts = [27500, 27300, 28000, 27850, 27900, 27600, 28100, 28300, 27900, 27800, 27700, 27400]\n\n# 색상 설정\ncolor_dict = {\n    'EV': '#d62728',\n    'B6': '#2ca02c',\n    'UA': '#1f77b4',\n    'Total': '#7f7f7f'\n}\n\n# Plot 설정\nfig, (ax_upper, ax_lower) = plt.subplots(2, 1, figsize=(14, 8), sharex=True,\n                                         gridspec_kw={'height_ratios': [1, 3]})\nfig.suptitle('항공사별 월별 운항 횟수', fontsize=20, fontweight='bold')\n\nx = range(len(labels))\n\n# 선 그래프 그리기\nax_lower.plot(x, EV_counts, label='EV', marker='o', color=color_dict['EV'], linewidth=4)\nax_lower.plot(x, B6_counts, label='B6', marker='o', color=color_dict['B6'])\nax_lower.plot(x, UA_counts, label='UA', marker='o', color=color_dict['UA'])\nax_upper.plot(x, Total_counts, label='Total', marker='o', color=color_dict['Total'])\n\n# 점 위/아래 텍스트 표시\nfor i in x:\n    ax_lower.text(i, EV_counts[i] - 70, str(EV_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['EV'])     # EV 아래\n#    ax_lower.text(i, B6_counts[i] + 50, str(B6_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['B6'])  # B6 위\n#   ax_lower.text(i, UA_counts[i] - 70, str(UA_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['UA'])     # UA 아래\n    ax_upper.text(i, Total_counts[i] + 150, str(Total_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['Total'])  # Total 위\n\n# Y축 범위\nax_lower.set_ylim(4000, 5100)\nax_upper.set_ylim(27000, 28500)\n\n# 물결선 표시\nd = .01\nkwargs = dict(transform=ax_upper.transAxes, color='k', clip_on=False)\nax_upper.plot((-d, +d), (-d, +d), **kwargs)\nax_upper.plot((1 - d, 1 + d), (-d, +d), **kwargs)\nkwargs.update(transform=ax_lower.transAxes)\nax_lower.plot((-d, +d), (1 - d, 1 + d), **kwargs)\nax_lower.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)\n\n# x축 설정\nax_lower.set_xticks(x)\nax_lower.set_xticklabels(labels, fontsize=12)\nax_lower.set_xlabel('월', fontsize=12)\nax_lower.set_ylabel('운항 횟수', fontsize=12)\n\n# 범례\ncustom_lines = [\n    Line2D([0], [0], color=color_dict['UA'], linestyle='-', marker='o', linewidth=2, label='UA'),\n    Line2D([0], [0], color=color_dict['B6'], linestyle='-', marker='o', linewidth=2, label='B6'),\n    Line2D([0], [0], color=color_dict['EV'], linestyle='-', marker='o', linewidth=2, label='EV')\n]\nax_upper.legend(\n    handles=custom_lines,\n    title='항공사',\n    fontsize=10,\n    title_fontsize=12,\n    loc='upper left',\n    bbox_to_anchor=(1.01, 1.0)\n)\n\nplt.subplots_adjust(hspace=0.05)\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n\n4. 월별 지연 파악 <br>\n```{python}\n\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\nEV_flight=EV_total[['carrier','distance','air_time']]\n\n# 비율(%) 및 라벨 처리\nfor df in [UA_total_group, B6_total_group, EV_total_group, total_group]:\n    df['delay_ratio_percent'] = df['delay_ratio'] * 100\n    df['month_str'] = df['month'].astype(str) + '월'\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\n\n# 색상 정의\ncolor_dict = {\n    'EV': '#d62728',     # 빨강\n    'B6': '#2ca02c',     # 초록\n    'UA': '#1f77b4',     # 파랑\n    'Total': '#7f7f7f'   # 회색\n}\n\n# 월 문자열 추가\nfor df in [EV_total_group, B6_total_group, UA_total_group, total_group]:\n    df['month_str'] = df['month'].astype(str) + '월'\n\n# 그래프 그리기\nplt.figure(figsize=(14, 8))\nplt.title('항공사별 월별 지연 비율 (%)', fontsize=20, fontweight='bold')\n\n# 선 그래프 그리기\nfor label, df in {\n    'EV': EV_total_group,\n    'B6': B6_total_group,\n    'UA': UA_total_group,\n    'Total': total_group\n}.items():\n    plt.plot(df['month_str'], df['delay_ratio_percent'], label=label,\n             marker='o',\n             linewidth=4 if label == 'EV' else 2,   # EV만 굵게!\n             color=color_dict[label])\n\n    # 텍스트 위치 및 표시 조건 설정\n    for x, y in zip(df['month_str'], df['delay_ratio_percent']):\n        if label == 'UA':\n            plt.text(x, y - 2, f\"{y:.1f}%\", ha='center', va='top', fontsize=15, color=color_dict[label])\n        elif label == 'EV':\n            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, \n                     color=color_dict[label], fontweight='bold')  \n        else:\n            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, color=color_dict[label])\n\n# y축 퍼센트 포맷\nplt.ylim(0, 70)\nplt.ylabel('지연 비율 (%)', fontsize=12)\nplt.xlabel('월', fontsize=12)\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n\n# 범례\nplt.legend(title='항공사', fontsize=10, title_fontsize=12)\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n\n\n## 지연 원인 분석 {.scrollable}\n\n1. EV 기체의 회전율 문제: 'tailnum'에 따른 시간 간격을 비교\n\n```{python}\n\n# EV 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\nev_schedule = EV_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nev_schedule['month_day_time'] = pd.to_datetime(ev_schedule['month_day_time'])\n# 시간순 정렬   # 수정사항 원래는 앞에 TAILNUM 이 있었는데 이럼 정렬 ㄴㄴ\nev_schedule = ev_schedule.sort_values(['month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n# diff()\nev_schedule['time_gap'] = ev_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nev_schedule['gap_hours'] = ev_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nev_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary = ev_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\n'''\ngap_hours에 대해서, \n\n'mean': 평균 비행 간격 (단위: 시간)\n\n'min': 가장 짧은 간격\n\n'count': 비행 횟수(정확히는 gap_hours 값이 있는 횟수 = 첫 비행 제외\n\n'''\n\nschedule_summary['count'].describe()\n\nschedule_summary.dropna()\n\nschedule_summary.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes = schedule_summary.sort_values('avg_gap_hr').head(10)\n\ntop_planes_with_seats = pd.merge(\n    top_planes,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n##############################################################\n# EV 비행기 회전율 시각화\n################################################333\n# 색상: 상위 4개는 빨간색, 나머지는 파란색\ncolors = ['#d62728' if i < 4 else '#1f77b4' for i in range(len(top_planes_with_seats))]\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(data=top_planes_with_seats, x='tailnum', y='avg_gap_hr', palette=colors)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 EV 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시 (한글, 볼드, 글자 크기 업)\nfor i, row in top_planes_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n::: {.panel-tabset}\n\n### UA\n\n```{python}\n# UA 기체 회전율\n\n# UA 항공사의 기체 회전율 비교\nua_schedule = UA_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nua_schedule['month_day_time'] = pd.to_datetime(ua_schedule['month_day_time'])\n\nua_schedule = ua_schedule.sort_values(['tailnum', 'month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n\nua_schedule['time_gap'] = ua_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nua_schedule['gap_hours'] = ua_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nua_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary_ua = ua_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\nschedule_summary_ua['count'].describe()\n\nschedule_summary_ua.dropna()\n\nschedule_summary_ua.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes_ua = schedule_summary_ua.sort_values('avg_gap_hr').head(10)\n\n# 좌석수 정보 병합\ntop_planes_ua_with_seats = pd.merge(\n    top_planes_ua,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n\n######################################################################################\n# UA 비행기 회전율 시각화\n#############################################################################\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(\n    data=top_planes_ua_with_seats,\n    x='tailnum',\n    y='avg_gap_hr',\n    color='#1f77b4'  # 파란색\n)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 UA 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시\nfor i, row in top_planes_ua_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n```\n\n### B6\n\n```{python}\n\n# B6 기체 회전율\n\n# B6 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\nb6_schedule = B6_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nb6_schedule['month_day_time'] = pd.to_datetime(b6_schedule['month_day_time'])\n\nb6_schedule = b6_schedule.sort_values(['tailnum', 'month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\nb6_schedule['time_gap'] = b6_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nb6_schedule['gap_hours'] = b6_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nb6_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary_b6 = b6_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\nschedule_summary_b6['count'].describe()\n\nschedule_summary_b6.dropna()\n\nschedule_summary_b6.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes_b6 = schedule_summary_b6.sort_values('avg_gap_hr').head(10)\n\n# 좌석수 정보 병합\ntop_planes_b6_with_seats = pd.merge(\n    top_planes_b6,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n################################################################################################\n# B6 기체 회전율 시각화\n##########################################################################################\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(\n    data=top_planes_b6_with_seats,\n    x='tailnum',\n    y='avg_gap_hr',\n    color='#1f77b4'  # 파란색\n)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 B6 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시\nfor i, row in top_planes_b6_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n:::\n\n\n---\n\n2. 단거리 위주의 항공사: 관제 순서 밀릴 가능성 有\n- JFK와 같은 장거리 위주의 공항에서 EV의 경우 소형 항공기이다 보니 관제 우선 순위에서 밀리는 경우가 많음<br>\n\n```{python}\n\norigin_summary = flights_cleaned.groupby('origin')[['distance', 'air_time']].mean().reset_index()\norigin_summary \n# jfk 거리가 1222 lga는 872로 평균 거리차이가 있음\n# 시간도 171 , 127로 차이가 있음\n\n## 공항별 평균 거리와 비행시간 시각화\nplt.figure(figsize=(14, 5))\n\n# 색상 매핑 함수\ndef get_color(airport):\n    if airport == 'JFK':\n        return '#2ca02c'  # 초록\n    elif airport == 'LGA':\n        return '#d62728'  # 빨강\n    else:\n        return '#1f77b4'  # 기본 파랑\n#####################################################################################\n\n# 1. 공항별 평균 거리 시각화\n\nplt.subplot(1, 2, 1)\ncolors_dist = origin_summary['origin'].apply(get_color).tolist()\nsns.barplot(data=origin_summary, x='origin', y='distance', palette=colors_dist)\nplt.title('공항별 평균 거리 (마일)', fontsize=16, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('평균 거리 (마일)', fontsize=14, fontweight='bold')\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\nfor i, val in enumerate(origin_summary['distance']):\n    plt.text(i, val + 10, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n###########################################################################################\n\n# 2. 공항별 평균 비행 시간 시각화\n\nplt.subplot(1, 2, 2)\ncolors_time = origin_summary['origin'].apply(get_color).tolist()\nsns.barplot(data=origin_summary, x='origin', y='air_time', palette=colors_time)\nplt.title('공항별 평균 비행 시간 (분)', fontsize=16, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 시간 (분)', fontsize=14, fontweight='bold')\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\nfor i, val in enumerate(origin_summary['air_time']):\n    plt.text(i, val + 2, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n\n3. 기상 조건: 1~6월 기상이 나쁘진않으나, 소형 항공기라서 기상 영향을 많이 받음 \n\n```{python}\n\nimport numpy as np\nimport pandas as pd\n\nimport pandas as pd\nimport nycflights13 as flights\n\n# 항공편 데이터 (main dataset)\ndf_flights = flights.flights\ndf_airlines = flights.airlines\ndf_airports = flights.airports\ndf_planes = flights.planes\ndf_weather = flights.weather\n\n# 결측치 제거\nflights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\n\n##월별로 고위험 날씨 조건이 발생한 비율\n\n# 월 컬럼 생성\ndf_weather['time_hour'] = pd.to_datetime(df_weather['time_hour'], errors='coerce')\ndf_weather['month'] = df_weather['time_hour'].dt.month\n\n# 고위험 조건 \ndf_weather['high_risk'] = (\n    (df_weather['wind_gust'] >= 30) |\n    (df_weather['wind_speed'] >= 20) |\n    (df_weather['visib'] < 1)\n)\n\n# 결측치 제거\ndf_weather_clean = df_weather.dropna(subset=['wind_gust', 'wind_speed', 'visib'])\n\n# 공항 × 월별 고위험 비율 계산\nrisk_by_month_airport = (\n    df_weather_clean.groupby(['origin', 'month'])\n    .agg(\n        total_obs=('high_risk', 'count'),\n        high_risk_obs=('high_risk', 'sum')\n    )\n    .reset_index()\n)\n\n#비율 계산\nrisk_by_month_airport['risk_ratio'] = (risk_by_month_airport['high_risk_obs'] / risk_by_month_airport['total_obs'] * 100).round(2)\n\n#출력\n\n\n##뉴욕 3개 공항에서 1~6월 동안 항공사별 월간운항 횟수\n# 1~6월 & 주요 항공사 & 주요 공항만 필터링\ntop3_carriers = ['UA', 'B6', 'EV']\nfiltered = flights_cleaned[\n    (flights_cleaned['carrier'].isin(top3_carriers)) &\n    (flights_cleaned['month'].between(1, 6)) &\n    (flights_cleaned['origin'].isin(['EWR', 'JFK', 'LGA']))\n]\n\n# 항공사별 × 공항별 × 월별 운항 수 집계\nmonthly_airport_counts = (\n    filtered.groupby(['carrier', 'month', 'origin'])\n    .size()\n    .reset_index(name='flight_count')\n)\n\n# 피벗 테이블로 보기 좋게 정리\npivot_table = monthly_airport_counts.pivot_table(\n    index=['carrier', 'month'],\n    columns='origin',\n    values='flight_count',\n    fill_value=0\n).astype(int)\n\ndisplay(pivot_table.loc['UA'].style.set_caption(\"UA 항공사 상반기 월별 운항 수\"))\n\n# for carrier in pivot_table.index.get_level_values(0).unique():\n#     print(f\"\\n=== 항공사: {carrier} ===\")\n#     print(pivot_table.loc[carrier])\n\n```\n\n## 해결 방안 및 전략\n\n1. 회전율 문제: 회전율이 낮은 기체 사용률 증가<br>\n\n---\n\n2. 단거리 위주의 공항으로 항공편을 많이 배치 (허브 연관)<br>\n<img src=\"./images/airport_loc.png\" alt=\"공항 이미지\" width=\"1000\">\n\n---\n\n3. 승무원 확충 및 점검 수시화 ( 회전율이 낮고, 작은 항공사이다 보니 승무원 인력 부족으로 인해 지연이 발생 )<br>\n<기사 같은 것 하나>\n\n# Thank you","srcMarkdownNoYaml":"\n\n# Contents\n1. 주제 도출 과정\n2. ExpressJet(EV) 항공사 분석 내용\n3. 지연 원인 분석\n4. 해결 방안 및 전략\n\n\n## 주제 도출 과정\n\n1. 분석 과정\n\n    - 데이터 전처리^[데이터 전처리 I.시간 순으로 날짜 재정렬 II. 결측지 제거 -> 지연 시간을 명확히 정할 수 있는 데이터만 활용] \n    - 지연 시간이 15분 이상인 데이터만 필터링<br>\n    \n```{python}\n#|echo : false\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport nycflights13 as flights\nimport matplotlib.font_manager as fm\n\nfont_path = r\"C:\\Windows\\Fonts\\malgun.ttf\"\nfm.fontManager.addfont(font_path)\nfont_name = fm.FontProperties(fname=font_path).get_name()\n\nplt.rcParams['font.family'] = font_name\nplt.rcParams['axes.unicode_minus'] = False\n\ndf_flights = flights.flights\ndf_airlines = flights.airlines\ndf_airports = flights.airports\ndf_planes = flights.planes\ndf_weather = flights.weather\n##################################################################################################\n## 데이터 전처리\n\n# 결측치 제거\nflights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\nflights_cleaned.shape # (327346, 19)\n\n# flights_cleanded와 df_planes merge ( key = tailnum )\nflights_cleaned = pd.merge(flights_cleaned,df_planes,on='tailnum',how='left')\n\n# 시간순으로 날짜 재정렬\nflights_cleaned.sort_values(['month', 'day'], inplace=True)\nflights_cleaned = flights_cleaned.reset_index(drop=True) # 인덱스 초기화\n\n# 15분 이상 지연된 항공편만 따로 데이터 프레임 생성 \nflights_delay = flights_cleaned[flights_cleaned['dep_delay']>=15]\nflights_delay = flights_delay.reset_index(drop=True)\nflights_delay\n\nflights_cleaned['month_day_time'] = pd.to_datetime({\n    'year': df_flights['year'],\n    'month': df_flights['month'],\n    'day': df_flights['day'],\n    'hour': df_flights['hour'],\n    'minute': df_flights['minute']\n})\n\n# 월별 분석\nUA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\nB6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n\n```\n\n\n```{python}\n#|echo : false\n# 항공사별 운항 수 집계\ncarrier_counts = df_flights['carrier'].value_counts().reset_index()\ncarrier_counts.columns = ['carrier', 'total_flights']\n\n# 항공사 이름 붙이기\ncarrier_counts = carrier_counts.merge(df_airlines, on='carrier', how='left')\n\n# 색상 매핑\ndef assign_color(carrier):\n    if carrier == 'EV':\n        return 'red'\n    elif carrier in ['UA', 'B6']:\n        return 'blue'\n    else:\n        return 'gray'\n\ncarrier_counts['color'] = carrier_counts['carrier'].apply(assign_color)\n\n# 시각화\nplt.figure(figsize=(13, 6))\nbars = plt.bar(\n    carrier_counts['carrier'],\n    carrier_counts['total_flights'],\n    color=carrier_counts['color']\n)\n\n# 레이블 및 제목\nplt.title('항공사별 연간 운항량', fontsize=16, weight='bold')\nplt.xlabel('항공사 코드')\nplt.ylabel('총 운항편 수')\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n```\n\n\n---\n\n- 항공사별 / 제조사별/ 공항별 지연시간에 명확한 차이가 있음을 확인 <br>\n\n::: {.panel-tabset}\n\n### 항공사별\n\n::::: columns\n::: {.column width=\"50%\"}\n\n```{python}\n\nflight_counts = flights_cleaned['carrier'].value_counts().reset_index() # UA B6 EV\n\n# 3사의 공항에 따른 지연율\n# 분석 대상 항공사\nselected_carriers = ['UA', 'B6', 'EV']\nflights_cleaned = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n\n# 3사 지연율 및 평균 계산 > summary_big3를 통해서 3사 중 EV의 지연율이 특출나게 높은 것을 확인할 수 있음\nsummary_big3 = flights_cleaned.groupby('carrier').apply(\n    lambda g: pd.Series({\n        'total_flights': len(g),\n        'delayed_flights': (g['dep_delay'] >= 15).sum(),\n        'delay_rate (%)': round((g['dep_delay'] >= 15).mean() * 100, 2),\n        'avg_delay (min)': round(g[g['dep_delay'] >= 15]['dep_delay'].mean(), 2)\n    })\n).reset_index()\nsummary_big3 = summary_big3.sort_values(\"total_flights\", ascending=False)\nsummary_big3 \n\n##################################################################################\n######################################################################################\n## 전체 항공사 별 지연율 비교 시각화\n####################################################################################\n#############################################################\n\nbar_colors = ['#d62728' if c == 'EV' else '#1f77b4' for c in summary_big3['carrier']]\n\nplt.figure(figsize=(6,5))\nsns.barplot(data=summary_big3, x='carrier', y='delay_rate (%)', palette=bar_colors)\n\nplt.title('항공사별 출발지연 비율(%)', fontsize=18, fontweight='bold')   # 제목 크기 키움 + 볼드체\nplt.xlabel('항공사', fontsize=14, fontweight='bold')              # x축 라벨 크기 키움 + 볼드체\nplt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')       # y축 라벨 크기 키움 + 볼드체\n\n# x축 항공사 이름 (눈금 레이블) 볼드체, 크기 14\nplt.xticks(fontsize=14, fontweight='bold')\n\nfor i, rate in enumerate(summary_big3['delay_rate (%)']):\n    plt.text(i, rate + 0.5, f'{rate}%', ha='center', va='bottom', fontsize=13, fontweight='bold')  # 텍스트 크기 키움 + 볼드체\n\nplt.ylim(0, summary_big3['delay_rate (%)'].max() + 5)\nplt.tight_layout()\nplt.show()\n```\n\n:::\n::: {.column width=\"50%\"}\n\n- 항공편 수 기준 상위 3개 항공사 비교\n- EV 항공사가 다른 항공사들에 비해 출발 지연 비율이 높음\n- 특히, 3등 항공사(EV)의 지연율과 1, 2등 항공사의 지연율에서 가장 큰 차이를 보임 <br>\n    - 해당 원인을 찾기 위해 분석을 진행\n:::\n:::::\n\n### 공항별\n\n::::: columns\n::: {.column width=\"60%\"}\n\n```{python}\n# 전체 항공편 수 (공항별)\ntotal_flights = flights_cleaned.groupby('origin').size().reset_index(name='total_flights')\n\n# 15분 이상 지연된 항공편 수 (공항별)\ndelayed_flights = flights_cleaned[flights_cleaned['dep_delay'] >= 15]\ndelayed_counts = delayed_flights.groupby('origin').size().reset_index(name='delayed_flights')\n\n# 비율 계산\ndelay_ratio = pd.merge(total_flights, delayed_counts, on='origin', how='left')\ndelay_ratio['delayed_flights'] = delay_ratio['delayed_flights'].fillna(0)\ndelay_ratio['delay_rate'] = delay_ratio['delayed_flights'] / delay_ratio['total_flights']\ndelay_ratio = delay_ratio.sort_values('delay_rate', ascending=False)\n\n# 시각화\nplt.figure(figsize=(10, 6))\nsns.barplot(data=delay_ratio, x='origin', y='delay_rate', color='#1f77b4')\n\n# 타이틀 및 축 설정\nplt.title('공항별 출발 지연 비율 (15분 이상 지연 기준)', fontsize=18, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')\n\n# 막대 위에 수치 표시 (퍼센트 형식)\nfor i, value in enumerate(delay_ratio['delay_rate']):\n    plt.text(i, value + 0.002, f'{value*100:.1f}%', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n# 폰트 및 범위 조정\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\nplt.ylim(0, delay_ratio['delay_rate'].max() + 0.02)\nplt.tight_layout()\nplt.show()\n\n```\n\n:::\n::: {.column width=\"40%\"}\n\n- 설명\n\n:::\n:::::\n\n:::\n\n\n::: {.notes}\n\n[“출발 시간(dep_time)과 출발 지연(dep_delay)이 동시에 결측인 경우, 항공편이 실제로 이륙하지 않은 것으로 간주했습니다. 이는 일반적으로 결항(Canceled)된 항공편으로 판단되며, 우리는 실제 운항된 항공편의 지연만 분석하고자 했기 때문에 해당 데이터를 제거했습니다.”]\n\n:::\n\n## ExpressJet(EV) 항공사 분석 내용 {.scrollable}\n\n1. 항공사 별 제조사 비교<br>\n\n### EV\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('EV')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('EV 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n### UA\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('UA')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('UA 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n### B6\n\n```{python}\n#| echo: false\n# 사용할 carrier만 필터링\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n# 항공사별 제조사 그룹화\nplane_features = (\n    big3\n    .dropna(subset=['manufacturer', 'seats'])\n    .groupby(['carrier', 'manufacturer'])\n    .agg(\n        avg_seats=('seats', 'mean'),\n        avg_engines=('engines', 'mean'),\n        count=('tailnum', 'nunique')\n    )\n    .reset_index()\n)\n# 항공사별 좌석수 평균 확인\navg_seats = (\n    big3.dropna(subset=['seats'])\n    .groupby('carrier')['seats']\n    .mean()\n    .reset_index()\n    .rename(columns={'seats': 'avg_seats'})\n)\n##################################################################################\n# 시각화\n##################################################################################\n# 3사 비행기의 제조사 비율 시각화###############\ndef preprocess_carrier_pie(carrier_code):\n    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n    df_sub = df_sub.sort_values(by='count', ascending=False)\n\n    total_planes = df_sub['count'].sum()\n    df_sub['ratio'] = df_sub['count'] / total_planes\n\n    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n\n    if not minor.empty:\n        other_row = pd.DataFrame({\n            'manufacturer': ['OTHER'],\n            'count': [minor['count'].sum()],\n            'ratio': [minor['count'].sum() / total_planes]\n        })\n        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n    else:\n        major = df_sub[['manufacturer', 'count', 'ratio']]\n\n    major = major.reset_index(drop=True)\n    return major, total_planes\n\nmanufacturer_colors = {\n    'BOEING': '#1f77b4',\n    'AIRBUS': '#ff7f0e',\n    'MCDONNELL DOUGLAS': '#2ca02c',\n    'EMBRAER': '#d62728',\n    'BOMBARDIER': '#9467bd',\n    'CANADAIR': '#8c564b',\n    'OTHER': '#aaaaaa'\n}\n\n############### EV\nmajor, total_planes = preprocess_carrier_pie('B6')\nlabels = major['manufacturer']\nsizes = major['count']\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n\nratios = sizes / sizes.sum()\nangles = ratios * 360\ncum_sizes = angles.cumsum()\nstart_angles = np.concatenate(([0], cum_sizes[:-1]))\n\nmax_idx = major['count'].idxmax()\ntop_idx = major['count'].nlargest(3).index.tolist()\ntop_idx.remove(max_idx)\nsecond_idx = top_idx[0]\n\nstart_angle_2nd = start_angles[second_idx]\nend_angle_2nd = cum_sizes[second_idx]\nmid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\nstartangle = 60 - mid_angle_2nd\n\nplt.figure(figsize=(7, 7))\nwedges, _ = plt.pie(\n    sizes,\n    labels=None,\n    startangle=startangle,\n    colors=colors,\n    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n)\n\ntop2_idx = major['count'].nlargest(2).index.tolist()\nfor i, w in enumerate(wedges):\n    if i in top2_idx:\n        angle = (w.theta2 + w.theta1) / 2\n        angle_rad = np.deg2rad(angle)\n        r = 0.55\n        x = r * np.cos(angle_rad)\n        y = r * np.sin(angle_rad)\n        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n                 fontsize=12, color='black')\n\nplt.title('B6 항공사의 제조사 비율', fontsize=16, pad=30)\nplt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\nplt.axis('equal')\nplt.tight_layout()\nplt.show()\n```\n\n---\n\n### 제조사별 평균 좌석 수 비교\n\n```{python}\n\n# 주요 제조사\nmajor_manufacturers = ['BOEING', 'EMBRAER', 'AIRBUS', 'MCDONNELL DOUGLAS']\n\n# 평균 좌석 수 계산\nif 'avg_seats' not in plane_features.columns:\n    avg_seats_by_mfg = (\n        big3.dropna(subset=['manufacturer', 'seats'])\n        .groupby('manufacturer')['seats']\n        .mean()\n        .reset_index()\n    )\nelse:\n    avg_seats_by_mfg = plane_features.groupby('manufacturer')['avg_seats'].mean().reset_index()\n\n# 주요 제조사만 필터링\navg_seats_by_mfg = avg_seats_by_mfg[avg_seats_by_mfg['manufacturer'].isin(major_manufacturers)]\n\n# 색상 설정\ncolors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in avg_seats_by_mfg['manufacturer']]\n\n# 시각화\nplt.figure(figsize=(8, 6))\nbars = plt.bar(\n    avg_seats_by_mfg['manufacturer'],\n    avg_seats_by_mfg['seats'] if 'seats' in avg_seats_by_mfg.columns else avg_seats_by_mfg['avg_seats'],\n    color=colors\n)\n\n# 타이틀 & 축 설정\nplt.title('제조사별 평균 좌석 수 비교', fontsize=18, fontweight='bold')\nplt.xlabel('제조사', fontsize=14, fontweight='bold')\nplt.ylabel('평균 좌석 수', fontsize=14, fontweight='bold')\n\n# 제조사 이름 글꼴 키우고 볼드 처리\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\n# 막대 위에 수치 표시\nfor bar in bars:\n    height = bar.get_height()\n    x = bar.get_x() + bar.get_width() / 2\n    plt.text(x, height + 2, f'{height:.0f}개', ha='center', va='bottom', fontsize=14, fontweight='bold')\n\nplt.ylim(0, max([bar.get_height() for bar in bars]) + 20)\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n---\n\n### 항공사별 평균 좌석 수\n```{python}\n\n# 각 항공사별 평균 좌석수 시각화\n# 색상 고정\ncarrier_colors = {\n    'EV': '#d62728',   # Red\n    'UA': '#1f77b4',   # Blue\n    'B6': '#1f77b4'    # Green\n}\n\n# 정렬\navg_seats_sorted = avg_seats.sort_values(by='avg_seats', ascending=False).reset_index(drop=True)\n\n# 색상 리스트 생성\nbar_colors = [carrier_colors.get(carrier, 'gray') for carrier in avg_seats_sorted['carrier']]\n\n# 시각화\nplt.figure(figsize=(9, 6))\nbars = sns.barplot(data=avg_seats_sorted, x='carrier', y='avg_seats', palette=bar_colors)\n\n# 수치 텍스트 박스 추가\nfor bar, value in zip(bars.patches, avg_seats_sorted['avg_seats']):\n    bars.annotate(f\"{value:.1f}\",\n                  (bar.get_x() + bar.get_width() / 2, bar.get_height()),\n                  ha='center', va='bottom',\n                  fontsize=13, fontweight='bold',\n                  bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.5))\n\n# 제목과 라벨\nplt.title(\"항공사별 평균 좌석 수\", fontsize=18, weight='bold')\nplt.xlabel(\"항공사\", fontsize=13)\nplt.ylabel(\"평균 좌석 수\", fontsize=13)\nplt.ylim(0, avg_seats_sorted['avg_seats'].max() + 30)\n\n# 범례 수동 추가\ncustom_labels = [plt.Rectangle((0,0),1,1, color=carrier_colors[c]) for c in avg_seats_sorted['carrier']]\nplt.legend(custom_labels, avg_seats_sorted['carrier'], title=\"항공사\", loc='upper right')\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n---\n\n### EV 항공사 기체 좌석 수\n```{python} \n\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\nEV_flight=EV_total[['carrier','distance','air_time']]\n#ev 항공사 기체 촤석 분포\n# 한글 폰트 설정 (Windows 기준)\nplt.rcParams['font.family'] = 'Malgun Gothic'\nplt.rcParams['axes.unicode_minus'] = False\n\n# EV 항공사 좌석 정보 준비\nEV_seats = EV_total[['seats']].dropna()\n\n# 좌석 구간 설정\nbins = [0, 50, 70, 90, 110, 130, 150, float('inf')]\nlabels = ['~50석', '51~70석', '71~90석', '91~110석', '111~130석', '131~150석', '151석 이상']\nEV_seats['좌석구간'] = pd.cut(EV_seats['seats'], bins=bins, labels=labels, right=False)\n\n# 좌석 구간별 비율 계산\nseat_distribution = (\n    EV_seats['좌석구간']\n    .value_counts(normalize=True)\n    .sort_index() * 100\n)\n\n# 시각화\nplt.figure(figsize=(10, 6))\ncolors = sns.color_palette('pastel', len(seat_distribution))\nbarplot = sns.barplot(x=seat_distribution.index, y=seat_distribution.values, palette=colors)\n\n# y축 범위 명시적으로 지정 (최대 100)\nplt.ylim(0, 100)\n\n# 제목 및 축 설정\nplt.title('EV 항공사 기체 좌석 수 분포', fontsize=16, fontweight='bold')\nplt.xlabel('좌석 수 구간', fontsize=12)\nplt.ylabel('비율 (%)', fontsize=12)\n\n# 수치 라벨 (막대 위에 충분히 띄워서)\nfor i, value in enumerate(seat_distribution.values):\n    plt.text(i, value + 2, f'{value:.1f}%', ha='center', va='bottom', fontsize=10)\n\nplt.tight_layout()\nplt.show()\n\n```\n\n\n\n::: {.notes}\n\n:::\n\n---\n\n\n2. 비행 거리 비교: 단/중/장 거리 비교<br>\n\n```{python}\n\n# 1. UA , 57782\n# distance, air_time 확인\nUA_flight=UA_total[['carrier','distance','air_time']]\nUA_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\n# distance는 내림차순, air_time은 오름차순으로 정렬( 동일한 거리에서 시간이 짧을 수록 비행 good)\nUA_flight.describe()\n\n# 2. B6, 54049\n# distance, air_time 확인\nB6_flight= B6_total[['carrier','distance','air_time']]\nB6_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\nB6_flight.describe()\n\n# 3. EV, 51108\n# distance, air_time 확인\nEV_flight=EV_total[['carrier','distance','air_time']]\nEV_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\nEV_flight.describe()\n\n'''\nUnited Airline\n700 mile 미만 -> short \n700 mile 이상 3000 mile 미만 -> medium\n3000 mile 이상 -> long\n'''\n\n# 상위 항공사 3개를 합친 새로운 DataFrame 생성\ntop3_flights = pd.concat([UA_flight, B6_flight, EV_flight], ignore_index=True)\n\n# 길이 (mile) 에 따른 기준 생성\ndef categorize_distance(mile):\n    if mile < 700:\n        return 'short'\n    elif mile < 3000:\n        return 'medium'\n    else:\n        return 'long'\n    \n# length라는 새 column을 만들어 거리를 비교    \ntop3_flights['length'] = top3_flights['distance'].apply(categorize_distance)    \n\n# pivot table 생성\npivot_flight = pd.pivot_table(\n    top3_flights,\n    index='carrier',\n    columns='length',\n    values='distance',      \n    aggfunc='count',\n    fill_value=0\n).reset_index()\npivot_flight.columns.name = None\npivot_flight = pivot_flight[['carrier', 'short', 'medium', 'long']]\npivot_flight \n##############################################################3\n# 항공사별 단거리 중거리 장거리 시각화\n#########################################################\n# 거리별 총합을 기준으로 비율 계산\ndistance_ratio = pivot_flight.copy()\ntotal = distance_ratio[['short', 'medium', 'long']].sum(axis=1)\ndistance_ratio['short_ratio'] = (distance_ratio['short'] / total * 100).round(2)\ndistance_ratio['medium_ratio'] = (distance_ratio['medium'] / total * 100).round(2)\ndistance_ratio['long_ratio'] = (distance_ratio['long'] / total * 100).round(2)\n\n# melt해서 long-form으로 변환\ndistance_ratio_melted = pd.melt(\n    distance_ratio,\n    id_vars='carrier',\n    value_vars=['short_ratio', 'medium_ratio', 'long_ratio'],\n    var_name='distance_group',\n    value_name='비율'\n)\n\n# distance_group 한글 라벨 정리\ndistance_ratio_melted['distance_group'] = distance_ratio_melted['distance_group'].map({\n    'short_ratio': '단거리',\n    'medium_ratio': '중거리',\n    'long_ratio': '장거리'\n})\n\n# 시각화\nplt.figure(figsize=(10, 6))\nax = sns.barplot(data=distance_ratio_melted, x='carrier', y='비율', hue='distance_group')\n\n# 막대 위에 비율 표시\nfor container in ax.containers:\n    for bar in container:\n        height = bar.get_height()\n        if height > 0:\n            ax.text(\n                bar.get_x() + bar.get_width() / 2,\n                height + 0.5,\n                f'{height:.1f}%',\n                ha='center',\n                va='bottom',\n                fontsize=9\n            )\n\nplt.title('항공사별 거리 구간별 항공편 비율 (%)', fontsize=15, fontweight='bold')\nplt.xlabel('항공사')\nplt.ylabel('항공편 비율 (%)')\nplt.legend(title='비행 거리 구간')\nplt.grid(axis='y')\nplt.tight_layout()\nplt.show()\n\n\n```\n\n---\n\n3. 공항별 지연 비교: 출발 공항 3군데에 대해서 항공사의 지연 분석<br>\n<공항별 항공사 평균 출발 지연시간(분)>\n\n```{python}\n\n# 1. 세 항공사만 필터링\nselected_carriers = ['UA', 'B6', 'EV']\nbig3 = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n\n# 2. 전체 항공편 수 (carrier + origin 기준)\ntotal_counts = (\n    big3.groupby(['carrier', 'origin'])\n    .size()\n    .reset_index(name='total_flights')\n)\n\n# 3. 15분 이상 지연된 항공편만 필터링\nbig3_delay = big3[big3['dep_delay'] >= 15]\n\n# 4. 지연된 항공편 수 (carrier + origin 기준)\ndelay_counts = (\n    big3_delay.groupby(['carrier', 'origin'])\n    .size()\n    .reset_index(name='delay_count')\n)\n\n# 5. 평균 지연 시간 (기존 코드 유지)\nairport_delay = (\n    big3_delay.dropna(subset=['dep_delay'])\n    .groupby(['carrier', 'origin'])['dep_delay']\n    .mean()\n    .reset_index()\n)\n##\n# 6. total_flights와 delay_count를 airport_delay에 merge\nairport_delay = pd.merge(airport_delay, total_counts, on=['carrier', 'origin'], how='left')\nairport_delay = pd.merge(airport_delay, delay_counts, on=['carrier', 'origin'], how='left')\n\n# 7. 결측값 처리 및 지연 비율 계산\nairport_delay['delay_count'] = airport_delay['delay_count'].fillna(0)\nairport_delay['delay_ratio'] = airport_delay['delay_count'] / airport_delay['total_flights']\n\n# 8. carrier 순서 정렬\ncarrier_order = ['UA', 'B6', 'EV']\nairport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n\n# 9. 공항 이름 붙이기 (origin -> 공항명)\nairport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\nairport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')\n######################################################################3\n######################################################################\n###############################################################################3\n##################################################################################3\n\n# 각 공항별 항공사 지연 시간 시각화\n# carrier별 색상 딕셔너리 (EV 빨강, 나머지 파랑)\npalette_dict = {\n    'EV': '#d62728',\n    'UA': '#1f77b4',\n    'B6': '#1f77b4',\n}\n\nplt.figure(figsize=(12, 7))\nbarplot = sns.barplot(\n    data=airport_delay,\n    x='origin',\n    y='dep_delay',   # 평균 지연 시간 컬럼명으로 맞춰주세요\n    hue='carrier',\n    palette=palette_dict\n)\n\nplt.title('공항별 항공사 평균 출발 지연 시간 (분)', fontsize=20, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=16, fontweight='bold')\nplt.ylabel('평균 지연 시간 (분)', fontsize=16, fontweight='bold')\n\n# 막대 위에 지연 시간 표시 (0보다 클 때만)\nfor p in barplot.patches:\n    height = p.get_height()\n    if height > 0:\n        plt.text(\n            p.get_x() + p.get_width()/2,\n            height + 0.5,\n            f'{height:.1f}분',\n            ha='center',\n            va='bottom',\n            fontsize=14,\n            fontweight='bold'\n        )\n\nplt.legend(title='항공사', title_fontsize=14, fontsize=12)\nplt.xticks(fontsize=14, fontweight='bold')\nplt.yticks(fontsize=14)\nplt.tight_layout()\nplt.show()\n# 원하는 carrier 순서로 지정\ncarrier_order = ['UA', 'B6', 'EV']\nairport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n\n# 공항 이름 붙이기 (origin code -> 공항명)\nairport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\nairport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')\n\n```\n\n\n---\n\n4. 월별 지연 파악 <br>\n\n```{python}\n\n# 월별 분석\nUA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\nB6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n\n# 전체 데이터 통계\ntotal_group = flights_cleaned.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# 전체 결항 데이터 통계 \ndelay_group = flights_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# 전체 데이터 통계 데이터 total_group에 월 별 지연 비율 추가\ntotal_group['delay_ratio'] = delay_group['count'] / total_group['count']\n\n# UA 전체 데이터 통계 \nUA_total_group = UA_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# UA 결항 데이터 통계 \nUA_delay = UA_total[UA_total['dep_delay']>15].reset_index(drop=True)\nUA_delay_group = UA_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# UA 전체 데이터 통계 데이터 UA_total_group에 월 별 지연 비율 추가\nUA_total_group['delay_ratio'] = UA_delay_group['count'] / UA_total_group['count']\n\n# B6 전체 데이터 통계 \nB6_total_group = B6_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# B6 결항 데이터 통계 \nB6_delay = B6_total[B6_total['dep_delay']>15].reset_index(drop=True)\nB6_delay_group = B6_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# B6 전체 데이터 통계 데이터 B6_total_group에 월 별 지연 비율 추가\nB6_total_group['delay_ratio'] = B6_delay_group['count'] / B6_total_group['count']\n\n# EV 전체 데이터 통계 \nEV_total_group = EV_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# EV 결항 데이터 통계 \nEV_delay = EV_total[EV_total['dep_delay']>15].reset_index(drop=True)\nEV_delay_group = EV_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n# EV 전체 데이터 통계 데이터 EV_total_group에 월 별 지연 비율 추가\nEV_total_group['delay_ratio'] = EV_delay_group['count'] / EV_total_group['count']\n\n###################################################################################\n###################################################################################\n#######################################################################################\n# 월별 운항 횟수 시각화\n########################################################################\nimport matplotlib.pyplot as plt\nfrom matplotlib.lines import Line2D\n\n# 데이터\nlabels = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\nEV_counts = [4300, 4150, 4500, 4600, 4550, 4600, 4700, 4750, 4540, 4810, 4600, 4380]\nB6_counts = [4400, 4200, 4700, 4650, 4580, 4550, 4900, 4940, 4700, 4700, 4630, 4650]\nUA_counts = [4500, 4350, 4600, 4610, 4590, 4550, 4920, 4900, 4800, 4750, 4700, 4390]\nTotal_counts = [27500, 27300, 28000, 27850, 27900, 27600, 28100, 28300, 27900, 27800, 27700, 27400]\n\n# 색상 설정\ncolor_dict = {\n    'EV': '#d62728',\n    'B6': '#2ca02c',\n    'UA': '#1f77b4',\n    'Total': '#7f7f7f'\n}\n\n# Plot 설정\nfig, (ax_upper, ax_lower) = plt.subplots(2, 1, figsize=(14, 8), sharex=True,\n                                         gridspec_kw={'height_ratios': [1, 3]})\nfig.suptitle('항공사별 월별 운항 횟수', fontsize=20, fontweight='bold')\n\nx = range(len(labels))\n\n# 선 그래프 그리기\nax_lower.plot(x, EV_counts, label='EV', marker='o', color=color_dict['EV'], linewidth=4)\nax_lower.plot(x, B6_counts, label='B6', marker='o', color=color_dict['B6'])\nax_lower.plot(x, UA_counts, label='UA', marker='o', color=color_dict['UA'])\nax_upper.plot(x, Total_counts, label='Total', marker='o', color=color_dict['Total'])\n\n# 점 위/아래 텍스트 표시\nfor i in x:\n    ax_lower.text(i, EV_counts[i] - 70, str(EV_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['EV'])     # EV 아래\n#    ax_lower.text(i, B6_counts[i] + 50, str(B6_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['B6'])  # B6 위\n#   ax_lower.text(i, UA_counts[i] - 70, str(UA_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['UA'])     # UA 아래\n    ax_upper.text(i, Total_counts[i] + 150, str(Total_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['Total'])  # Total 위\n\n# Y축 범위\nax_lower.set_ylim(4000, 5100)\nax_upper.set_ylim(27000, 28500)\n\n# 물결선 표시\nd = .01\nkwargs = dict(transform=ax_upper.transAxes, color='k', clip_on=False)\nax_upper.plot((-d, +d), (-d, +d), **kwargs)\nax_upper.plot((1 - d, 1 + d), (-d, +d), **kwargs)\nkwargs.update(transform=ax_lower.transAxes)\nax_lower.plot((-d, +d), (1 - d, 1 + d), **kwargs)\nax_lower.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)\n\n# x축 설정\nax_lower.set_xticks(x)\nax_lower.set_xticklabels(labels, fontsize=12)\nax_lower.set_xlabel('월', fontsize=12)\nax_lower.set_ylabel('운항 횟수', fontsize=12)\n\n# 범례\ncustom_lines = [\n    Line2D([0], [0], color=color_dict['UA'], linestyle='-', marker='o', linewidth=2, label='UA'),\n    Line2D([0], [0], color=color_dict['B6'], linestyle='-', marker='o', linewidth=2, label='B6'),\n    Line2D([0], [0], color=color_dict['EV'], linestyle='-', marker='o', linewidth=2, label='EV')\n]\nax_upper.legend(\n    handles=custom_lines,\n    title='항공사',\n    fontsize=10,\n    title_fontsize=12,\n    loc='upper left',\n    bbox_to_anchor=(1.01, 1.0)\n)\n\nplt.subplots_adjust(hspace=0.05)\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n\n4. 월별 지연 파악 <br>\n```{python}\n\nEV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\nEV_flight=EV_total[['carrier','distance','air_time']]\n\n# 비율(%) 및 라벨 처리\nfor df in [UA_total_group, B6_total_group, EV_total_group, total_group]:\n    df['delay_ratio_percent'] = df['delay_ratio'] * 100\n    df['month_str'] = df['month'].astype(str) + '월'\n\nimport matplotlib.pyplot as plt\nimport matplotlib.ticker as mtick\nimport seaborn as sns\n\n# 색상 정의\ncolor_dict = {\n    'EV': '#d62728',     # 빨강\n    'B6': '#2ca02c',     # 초록\n    'UA': '#1f77b4',     # 파랑\n    'Total': '#7f7f7f'   # 회색\n}\n\n# 월 문자열 추가\nfor df in [EV_total_group, B6_total_group, UA_total_group, total_group]:\n    df['month_str'] = df['month'].astype(str) + '월'\n\n# 그래프 그리기\nplt.figure(figsize=(14, 8))\nplt.title('항공사별 월별 지연 비율 (%)', fontsize=20, fontweight='bold')\n\n# 선 그래프 그리기\nfor label, df in {\n    'EV': EV_total_group,\n    'B6': B6_total_group,\n    'UA': UA_total_group,\n    'Total': total_group\n}.items():\n    plt.plot(df['month_str'], df['delay_ratio_percent'], label=label,\n             marker='o',\n             linewidth=4 if label == 'EV' else 2,   # EV만 굵게!\n             color=color_dict[label])\n\n    # 텍스트 위치 및 표시 조건 설정\n    for x, y in zip(df['month_str'], df['delay_ratio_percent']):\n        if label == 'UA':\n            plt.text(x, y - 2, f\"{y:.1f}%\", ha='center', va='top', fontsize=15, color=color_dict[label])\n        elif label == 'EV':\n            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, \n                     color=color_dict[label], fontweight='bold')  \n        else:\n            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, color=color_dict[label])\n\n# y축 퍼센트 포맷\nplt.ylim(0, 70)\nplt.ylabel('지연 비율 (%)', fontsize=12)\nplt.xlabel('월', fontsize=12)\nplt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n\n# 범례\nplt.legend(title='항공사', fontsize=10, title_fontsize=12)\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n\n\n## 지연 원인 분석 {.scrollable}\n\n1. EV 기체의 회전율 문제: 'tailnum'에 따른 시간 간격을 비교\n\n```{python}\n\n# EV 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\nev_schedule = EV_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nev_schedule['month_day_time'] = pd.to_datetime(ev_schedule['month_day_time'])\n# 시간순 정렬   # 수정사항 원래는 앞에 TAILNUM 이 있었는데 이럼 정렬 ㄴㄴ\nev_schedule = ev_schedule.sort_values(['month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n# diff()\nev_schedule['time_gap'] = ev_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nev_schedule['gap_hours'] = ev_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nev_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary = ev_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\n'''\ngap_hours에 대해서, \n\n'mean': 평균 비행 간격 (단위: 시간)\n\n'min': 가장 짧은 간격\n\n'count': 비행 횟수(정확히는 gap_hours 값이 있는 횟수 = 첫 비행 제외\n\n'''\n\nschedule_summary['count'].describe()\n\nschedule_summary.dropna()\n\nschedule_summary.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes = schedule_summary.sort_values('avg_gap_hr').head(10)\n\ntop_planes_with_seats = pd.merge(\n    top_planes,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n##############################################################\n# EV 비행기 회전율 시각화\n################################################333\n# 색상: 상위 4개는 빨간색, 나머지는 파란색\ncolors = ['#d62728' if i < 4 else '#1f77b4' for i in range(len(top_planes_with_seats))]\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(data=top_planes_with_seats, x='tailnum', y='avg_gap_hr', palette=colors)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 EV 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시 (한글, 볼드, 글자 크기 업)\nfor i, row in top_planes_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n::: {.panel-tabset}\n\n### UA\n\n```{python}\n# UA 기체 회전율\n\n# UA 항공사의 기체 회전율 비교\nua_schedule = UA_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nua_schedule['month_day_time'] = pd.to_datetime(ua_schedule['month_day_time'])\n\nua_schedule = ua_schedule.sort_values(['tailnum', 'month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n\nua_schedule['time_gap'] = ua_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nua_schedule['gap_hours'] = ua_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nua_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary_ua = ua_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\nschedule_summary_ua['count'].describe()\n\nschedule_summary_ua.dropna()\n\nschedule_summary_ua.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes_ua = schedule_summary_ua.sort_values('avg_gap_hr').head(10)\n\n# 좌석수 정보 병합\ntop_planes_ua_with_seats = pd.merge(\n    top_planes_ua,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n\n######################################################################################\n# UA 비행기 회전율 시각화\n#############################################################################\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(\n    data=top_planes_ua_with_seats,\n    x='tailnum',\n    y='avg_gap_hr',\n    color='#1f77b4'  # 파란색\n)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 UA 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시\nfor i, row in top_planes_ua_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n```\n\n### B6\n\n```{python}\n\n# B6 기체 회전율\n\n# B6 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\nb6_schedule = B6_total[['tailnum', 'month_day_time']].dropna()\n\n# 1. datetime 형식으로 먼저 변환\nb6_schedule['month_day_time'] = pd.to_datetime(b6_schedule['month_day_time'])\n\nb6_schedule = b6_schedule.sort_values(['tailnum', 'month_day_time'])\n\n# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\nb6_schedule['time_gap'] = b6_schedule.groupby('tailnum')['month_day_time'].diff()\n\n# 값이 NaT인 경우, \n# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n\n# 간격을 시간(hour) 단위로 변경\nb6_schedule['gap_hours'] = b6_schedule['time_gap'].dt.total_seconds() / 3600\n\n# 3. 결과 확인\nb6_schedule['time_gap']\n\n# 4. 값 확인\nschedule_summary_b6 = b6_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n\nschedule_summary_b6['count'].describe()\n\nschedule_summary_b6.dropna()\n\nschedule_summary_b6.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n\ntop_planes_b6 = schedule_summary_b6.sort_values('avg_gap_hr').head(10)\n\n# 좌석수 정보 병합\ntop_planes_b6_with_seats = pd.merge(\n    top_planes_b6,\n    df_planes[['tailnum', 'seats']],\n    on='tailnum',\n    how='left'\n)\n################################################################################################\n# B6 기체 회전율 시각화\n##########################################################################################\n\nplt.figure(figsize=(10, 5))\nbarplot = sns.barplot(\n    data=top_planes_b6_with_seats,\n    x='tailnum',\n    y='avg_gap_hr',\n    color='#1f77b4'  # 파란색\n)\n\nplt.xticks(rotation=45, fontsize=12, fontweight='bold')\nplt.title('평균 비행 간격이 가장 짧은 10대 B6 항공기', fontsize=16, fontweight='bold')\nplt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\nplt.grid(True)\n\n# 막대 위에 좌석 수 표시\nfor i, row in top_planes_b6_with_seats.iterrows():\n    if pd.notna(row['seats']):\n        plt.text(\n            x=i,\n            y=row['avg_gap_hr'] + 0.2,\n            s=f\"{int(row['seats'])}석\",\n            ha='center',\n            va='bottom',\n            fontsize=12,\n            fontweight='bold'\n        )\n\nplt.tight_layout()\nplt.show()\n\n\n```\n\n\n:::\n\n\n---\n\n2. 단거리 위주의 항공사: 관제 순서 밀릴 가능성 有\n- JFK와 같은 장거리 위주의 공항에서 EV의 경우 소형 항공기이다 보니 관제 우선 순위에서 밀리는 경우가 많음<br>\n\n```{python}\n\norigin_summary = flights_cleaned.groupby('origin')[['distance', 'air_time']].mean().reset_index()\norigin_summary \n# jfk 거리가 1222 lga는 872로 평균 거리차이가 있음\n# 시간도 171 , 127로 차이가 있음\n\n## 공항별 평균 거리와 비행시간 시각화\nplt.figure(figsize=(14, 5))\n\n# 색상 매핑 함수\ndef get_color(airport):\n    if airport == 'JFK':\n        return '#2ca02c'  # 초록\n    elif airport == 'LGA':\n        return '#d62728'  # 빨강\n    else:\n        return '#1f77b4'  # 기본 파랑\n#####################################################################################\n\n# 1. 공항별 평균 거리 시각화\n\nplt.subplot(1, 2, 1)\ncolors_dist = origin_summary['origin'].apply(get_color).tolist()\nsns.barplot(data=origin_summary, x='origin', y='distance', palette=colors_dist)\nplt.title('공항별 평균 거리 (마일)', fontsize=16, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('평균 거리 (마일)', fontsize=14, fontweight='bold')\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\nfor i, val in enumerate(origin_summary['distance']):\n    plt.text(i, val + 10, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\n###########################################################################################\n\n# 2. 공항별 평균 비행 시간 시각화\n\nplt.subplot(1, 2, 2)\ncolors_time = origin_summary['origin'].apply(get_color).tolist()\nsns.barplot(data=origin_summary, x='origin', y='air_time', palette=colors_time)\nplt.title('공항별 평균 비행 시간 (분)', fontsize=16, fontweight='bold')\nplt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\nplt.ylabel('평균 비행 시간 (분)', fontsize=14, fontweight='bold')\nplt.xticks(fontsize=12, fontweight='bold')\nplt.yticks(fontsize=12)\n\nfor i, val in enumerate(origin_summary['air_time']):\n    plt.text(i, val + 2, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n\nplt.tight_layout()\nplt.show()\n\n```\n\n---\n\n3. 기상 조건: 1~6월 기상이 나쁘진않으나, 소형 항공기라서 기상 영향을 많이 받음 \n\n```{python}\n\nimport numpy as np\nimport pandas as pd\n\nimport pandas as pd\nimport nycflights13 as flights\n\n# 항공편 데이터 (main dataset)\ndf_flights = flights.flights\ndf_airlines = flights.airlines\ndf_airports = flights.airports\ndf_planes = flights.planes\ndf_weather = flights.weather\n\n# 결측치 제거\nflights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\n\n##월별로 고위험 날씨 조건이 발생한 비율\n\n# 월 컬럼 생성\ndf_weather['time_hour'] = pd.to_datetime(df_weather['time_hour'], errors='coerce')\ndf_weather['month'] = df_weather['time_hour'].dt.month\n\n# 고위험 조건 \ndf_weather['high_risk'] = (\n    (df_weather['wind_gust'] >= 30) |\n    (df_weather['wind_speed'] >= 20) |\n    (df_weather['visib'] < 1)\n)\n\n# 결측치 제거\ndf_weather_clean = df_weather.dropna(subset=['wind_gust', 'wind_speed', 'visib'])\n\n# 공항 × 월별 고위험 비율 계산\nrisk_by_month_airport = (\n    df_weather_clean.groupby(['origin', 'month'])\n    .agg(\n        total_obs=('high_risk', 'count'),\n        high_risk_obs=('high_risk', 'sum')\n    )\n    .reset_index()\n)\n\n#비율 계산\nrisk_by_month_airport['risk_ratio'] = (risk_by_month_airport['high_risk_obs'] / risk_by_month_airport['total_obs'] * 100).round(2)\n\n#출력\n\n\n##뉴욕 3개 공항에서 1~6월 동안 항공사별 월간운항 횟수\n# 1~6월 & 주요 항공사 & 주요 공항만 필터링\ntop3_carriers = ['UA', 'B6', 'EV']\nfiltered = flights_cleaned[\n    (flights_cleaned['carrier'].isin(top3_carriers)) &\n    (flights_cleaned['month'].between(1, 6)) &\n    (flights_cleaned['origin'].isin(['EWR', 'JFK', 'LGA']))\n]\n\n# 항공사별 × 공항별 × 월별 운항 수 집계\nmonthly_airport_counts = (\n    filtered.groupby(['carrier', 'month', 'origin'])\n    .size()\n    .reset_index(name='flight_count')\n)\n\n# 피벗 테이블로 보기 좋게 정리\npivot_table = monthly_airport_counts.pivot_table(\n    index=['carrier', 'month'],\n    columns='origin',\n    values='flight_count',\n    fill_value=0\n).astype(int)\n\ndisplay(pivot_table.loc['UA'].style.set_caption(\"UA 항공사 상반기 월별 운항 수\"))\n\n# for carrier in pivot_table.index.get_level_values(0).unique():\n#     print(f\"\\n=== 항공사: {carrier} ===\")\n#     print(pivot_table.loc[carrier])\n\n```\n\n## 해결 방안 및 전략\n\n1. 회전율 문제: 회전율이 낮은 기체 사용률 증가<br>\n\n---\n\n2. 단거리 위주의 공항으로 항공편을 많이 배치 (허브 연관)<br>\n<img src=\"./images/airport_loc.png\" alt=\"공항 이미지\" width=\"1000\">\n\n---\n\n3. 승무원 확충 및 점검 수시화 ( 회전율이 낮고, 작은 항공사이다 보니 승무원 인력 부족으로 인해 지연이 발생 )<br>\n<기사 같은 것 하나>\n\n# Thank you"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.9/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","reference-location":"document","output-file":"project-nyc.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.32","auto-stretch":true,"logo":"images/LS-cap-Logo.png","theme":["blood","custom.scss"],"footer":"LS빅데이터스쿨5기","title":"3등 항공사의 생존 전략","title-slide-attributes":{"data-background-image":"./images/expressjet_airlines_cover.jfif","data-background-size":"cover","data-background-opacity":"0.28"},"subtitle":"ExpressJet(EV)","author":"2조 - 윤희재, 박소영, 윤해진, 이우영, 이유진","::":null}}},"projectFormats":["revealjs"]}