{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"3등 항공사의 생존 전략\"\n",
        "title-slide-attributes:\n",
        "    data-background-image: ./images/expressjet_airlines_cover.jfif\n",
        "    data-background-size: cover\n",
        "    data-background-opacity: \"0.28\"\n",
        "subtitle: \"ExpressJet(EV)\"\n",
        "author: 2조 - 윤희재, 박소영, 윤해진, 이우영, 이유진\n",
        "format: revealjs\n",
        "\n",
        "---\n",
        "\n",
        "# Contents\n",
        "1. 주제 도출 과정\n",
        "2. ExpressJet(EV) 항공사 분석 내용\n",
        "3. 지연 원인 분석\n",
        "4. 해결 방안 및 전략\n",
        "\n",
        "\n",
        "# 1. 주제 도출 과정\n",
        "\n",
        "---\n",
        "\n",
        "### 1. 분석 과정\n",
        "\n",
        "- 데이터 전처리^[I.시간 순으로 날짜 재정렬 II. 결측지 제거 -> 지연 시간을 명확히 정할 수 있는 데이터만 활용] \n",
        "- 지연 시간이 15분 이상인 데이터만 필터링<br>\n"
      ],
      "id": "f1c8a980"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|echo : false\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import nycflights13 as flights\n",
        "import matplotlib.font_manager as fm\n",
        "\n",
        "font_path = r\"C:\\Windows\\Fonts\\malgun.ttf\"\n",
        "fm.fontManager.addfont(font_path)\n",
        "font_name = fm.FontProperties(fname=font_path).get_name()\n",
        "\n",
        "plt.rcParams['font.family'] = font_name\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "df_flights = flights.flights\n",
        "df_airlines = flights.airlines\n",
        "df_airports = flights.airports\n",
        "df_planes = flights.planes\n",
        "df_weather = flights.weather\n",
        "##################################################################################################\n",
        "## 데이터 전처리\n",
        "\n",
        "# 결측치 제거\n",
        "flights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\n",
        "flights_cleaned.shape # (327346, 19)\n",
        "\n",
        "# flights_cleanded와 df_planes merge ( key = tailnum )\n",
        "flights_cleaned = pd.merge(flights_cleaned,df_planes,on='tailnum',how='left')\n",
        "\n",
        "# 시간순으로 날짜 재정렬\n",
        "flights_cleaned.sort_values(['month', 'day'], inplace=True)\n",
        "flights_cleaned = flights_cleaned.reset_index(drop=True) # 인덱스 초기화\n",
        "\n",
        "# 15분 이상 지연된 항공편만 따로 데이터 프레임 생성 \n",
        "flights_delay = flights_cleaned[flights_cleaned['dep_delay']>=15]\n",
        "flights_delay = flights_delay.reset_index(drop=True)\n",
        "flights_delay\n",
        "\n",
        "flights_cleaned['month_day_time'] = pd.to_datetime({\n",
        "    'year': df_flights['year'],\n",
        "    'month': df_flights['month'],\n",
        "    'day': df_flights['day'],\n",
        "    'hour': df_flights['hour'],\n",
        "    'minute': df_flights['minute']\n",
        "})\n",
        "\n",
        "# 월별 분석\n",
        "UA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\n",
        "B6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\n",
        "EV_total = flights_cleaned[flights_cleaned['carrier']=='EV']"
      ],
      "id": "36e662a9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|echo : false\n",
        "# 항공사별 운항 수 집계\n",
        "carrier_counts = df_flights['carrier'].value_counts().reset_index()\n",
        "carrier_counts.columns = ['carrier', 'total_flights']\n",
        "\n",
        "# 항공사 이름 붙이기\n",
        "carrier_counts = carrier_counts.merge(df_airlines, on='carrier', how='left')\n",
        "\n",
        "# 색상 매핑\n",
        "def assign_color(carrier):\n",
        "    if carrier == 'EV':\n",
        "        return 'red'\n",
        "    elif carrier in ['UA', 'B6']:\n",
        "        return 'blue'\n",
        "    else:\n",
        "        return 'gray'\n",
        "\n",
        "carrier_counts['color'] = carrier_counts['carrier'].apply(assign_color)\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(13, 6))\n",
        "bars = plt.bar(\n",
        "    carrier_counts['carrier'],\n",
        "    carrier_counts['total_flights'],\n",
        "    color=carrier_counts['color']\n",
        ")\n",
        "\n",
        "# 레이블 및 제목\n",
        "plt.title('항공사별 연간 운항량', fontsize=16, weight='bold')\n",
        "plt.xlabel('항공사 코드')\n",
        "plt.ylabel('총 운항편 수')\n",
        "plt.grid(axis='y')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "e0384313",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 분석 과정 \n",
        "\n",
        "- 항공사별 / 공항별 / 월별 지연율에 명확한 차이가 있음을 확인 <br>\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### 항공사별\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "7bd55885"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "flight_counts = flights_cleaned['carrier'].value_counts().reset_index() # UA B6 EV\n",
        "\n",
        "# 3사의 공항에 따른 지연율\n",
        "# 분석 대상 항공사\n",
        "selected_carriers = ['UA', 'B6', 'EV']\n",
        "flights_cleaned = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n",
        "\n",
        "# 3사 지연율 및 평균 계산 > summary_big3를 통해서 3사 중 EV의 지연율이 특출나게 높은 것을 확인할 수 있음\n",
        "summary_big3 = flights_cleaned.groupby('carrier').apply(\n",
        "    lambda g: pd.Series({\n",
        "        'total_flights': len(g),\n",
        "        'delayed_flights': (g['dep_delay'] >= 15).sum(),\n",
        "        'delay_rate (%)': round((g['dep_delay'] >= 15).mean() * 100, 2),\n",
        "        'avg_delay (min)': round(g[g['dep_delay'] >= 15]['dep_delay'].mean(), 2)\n",
        "    })\n",
        ").reset_index()\n",
        "summary_big3 = summary_big3.sort_values(\"total_flights\", ascending=False)\n",
        "summary_big3 \n",
        "\n",
        "##################################################################################\n",
        "######################################################################################\n",
        "## 전체 항공사 별 지연율 비교 시각화\n",
        "####################################################################################\n",
        "#############################################################\n",
        "\n",
        "bar_colors = ['#d62728' if c == 'EV' else '#1f77b4' for c in summary_big3['carrier']]\n",
        "\n",
        "plt.figure(figsize=(6,5))\n",
        "sns.barplot(data=summary_big3, x='carrier', y='delay_rate (%)', palette=bar_colors)\n",
        "\n",
        "plt.title('항공사별 출발지연 비율(%)', fontsize=18, fontweight='bold')   # 제목 크기 키움 + 볼드체\n",
        "plt.xlabel('항공사', fontsize=14, fontweight='bold')              # x축 라벨 크기 키움 + 볼드체\n",
        "plt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')       # y축 라벨 크기 키움 + 볼드체\n",
        "\n",
        "# x축 항공사 이름 (눈금 레이블) 볼드체, 크기 14\n",
        "plt.xticks(fontsize=14, fontweight='bold')\n",
        "\n",
        "for i, rate in enumerate(summary_big3['delay_rate (%)']):\n",
        "    plt.text(i, rate + 0.5, f'{rate}%', ha='center', va='bottom', fontsize=13, fontweight='bold')  # 텍스트 크기 키움 + 볼드체\n",
        "\n",
        "plt.ylim(0, summary_big3['delay_rate (%)'].max() + 5)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "875795b7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "- 항공편 수 기준 상위 3개 항공사 비교\n",
        "- EV 항공사가 다른 항공사들에 비해 출발 지연 비율이 높음\n",
        "- 특히, 3등 항공사(EV)의 지연율과 1, 2등 항공사의 지연율에서 가장 큰 차이를 보임 <br>\n",
        "    - 해당 원인을 찾기 위해 분석을 진행\n",
        ":::\n",
        ":::::\n",
        "\n",
        "### 공항별\n",
        "\n",
        "::::: columns\n",
        "::: {.column width=\"60%\"}"
      ],
      "id": "8a5e3818"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#공항별 항공사 출발 지연 비율\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# 색상 딕셔너리\n",
        "palette_dict = {\n",
        "    'EV': '#d62728',  # 빨강\n",
        "    'UA': '#1f77b4',  # 파랑\n",
        "    'B6': '#1f77b4',  # 파랑\n",
        "}\n",
        "\n",
        "# hue 순서 설정 (EV 오른쪽)\n",
        "carrier_order = ['UA', 'B6', 'EV']\n",
        "\n",
        "# 지연 비율 계산 (15분 이상)\n",
        "delay_by_airport_carrier = (\n",
        "    flights_cleaned\n",
        "    .assign(is_delayed=flights_cleaned['dep_delay'] >= 15)\n",
        "    .groupby(['origin', 'carrier'])\n",
        "    .agg(\n",
        "        total_flights=('flight', 'count'),\n",
        "        delayed_flights=('is_delayed', 'sum')\n",
        "    )\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "delay_by_airport_carrier['delay_rate'] = (\n",
        "    delay_by_airport_carrier['delayed_flights'] / delay_by_airport_carrier['total_flights'] * 100\n",
        ").round(2)\n",
        "\n",
        "# 대상 공항과 항공사 필터\n",
        "filtered = delay_by_airport_carrier[\n",
        "    delay_by_airport_carrier['origin'].isin(['JFK', 'LGA', 'EWR']) &\n",
        "    delay_by_airport_carrier['carrier'].isin(['UA', 'B6', 'EV'])\n",
        "]\n",
        "\n",
        "# 그래프 그리기\n",
        "plt.figure(figsize=(10, 7))\n",
        "ax = sns.barplot(\n",
        "    data=filtered,\n",
        "    x='origin',\n",
        "    y='delay_rate',\n",
        "    hue='carrier',\n",
        "    hue_order=carrier_order,\n",
        "    palette=palette_dict\n",
        ")\n",
        "\n",
        "plt.title('공항별 항공사 출발 지연 비율(15분 이상 지연기준)', fontsize=17, fontweight='bold')\n",
        "plt.xlabel('출발 공항', fontsize=14, fontweight='bold')  # x축 라벨 키움\n",
        "plt.ylabel('지연 비율 (%)', fontsize=14, fontweight='bold')  # y축 라벨 키움\n",
        "plt.xticks(fontsize=13, fontweight='bold')  # x축 눈금 키움\n",
        "plt.yticks(fontsize=13, fontweight='bold')  # y축 눈금 키움\n",
        "\n",
        "plt.ylim(0, 40)\n",
        "plt.legend(title='항공사', fontsize=12, title_fontsize=13)\n",
        "plt.grid(axis='y')\n",
        "\n",
        "# 0.0% 제외한 값만 표시하고 숫자 크기 확대\n",
        "for bar in ax.patches:\n",
        "    height = bar.get_height()\n",
        "    if height != 0:\n",
        "        x = bar.get_x() + bar.get_width() / 2\n",
        "        ax.text(x, height + 0.8, f'{height:.1f}%', ha='center', va='bottom', fontsize=13, fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "5e43e023",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::: {.column width=\"40%\"}\n",
        "\n",
        "<br>\n",
        "\n",
        "- EV가 타사 대비 뉴욕 출발 공항 지연 비율이 높은 것을 확인할 수 있음.\n",
        "\n",
        ":::\n",
        ":::::\n",
        "\n",
        "### 월별 {.scrollable}\n",
        "\n",
        "<!-- ::::: columns\n",
        "::: {.column width=\"60%\"} -->"
      ],
      "id": "551b8d2b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 월별 분석\n",
        "UA_total = flights_cleaned[flights_cleaned['carrier']=='UA']\n",
        "B6_total = flights_cleaned[flights_cleaned['carrier']=='B6']\n",
        "EV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n",
        "\n",
        "# 전체 데이터 통계\n",
        "total_group = flights_cleaned.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# 전체 결항 데이터 통계 \n",
        "delay_group = flights_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# 전체 데이터 통계 데이터 total_group에 월 별 지연 비율 추가\n",
        "total_group['delay_ratio'] = delay_group['count'] / total_group['count']\n",
        "\n",
        "# UA 전체 데이터 통계 \n",
        "UA_total_group = UA_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# UA 결항 데이터 통계 \n",
        "UA_delay = UA_total[UA_total['dep_delay']>15].reset_index(drop=True)\n",
        "UA_delay_group = UA_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# UA 전체 데이터 통계 데이터 UA_total_group에 월 별 지연 비율 추가\n",
        "UA_total_group['delay_ratio'] = UA_delay_group['count'] / UA_total_group['count']\n",
        "\n",
        "# B6 전체 데이터 통계 \n",
        "B6_total_group = B6_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# B6 결항 데이터 통계 \n",
        "B6_delay = B6_total[B6_total['dep_delay']>15].reset_index(drop=True)\n",
        "B6_delay_group = B6_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# B6 전체 데이터 통계 데이터 B6_total_group에 월 별 지연 비율 추가\n",
        "B6_total_group['delay_ratio'] = B6_delay_group['count'] / B6_total_group['count']\n",
        "\n",
        "# EV 전체 데이터 통계 \n",
        "EV_total_group = EV_total.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# EV 결항 데이터 통계 \n",
        "EV_delay = EV_total[EV_total['dep_delay']>15].reset_index(drop=True)\n",
        "EV_delay_group = EV_delay.groupby('month',as_index=False)['dep_delay'].agg(['count','mean'])\n",
        "# EV 전체 데이터 통계 데이터 EV_total_group에 월 별 지연 비율 추가\n",
        "EV_total_group['delay_ratio'] = EV_delay_group['count'] / EV_total_group['count']\n",
        "\n",
        "EV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n",
        "EV_flight=EV_total[['carrier','distance','air_time']]\n",
        "\n",
        "# 비율(%) 및 라벨 처리\n",
        "for df in [UA_total_group, B6_total_group, EV_total_group, total_group]:\n",
        "    df['delay_ratio_percent'] = df['delay_ratio'] * 100\n",
        "    df['month_str'] = df['month'].astype(str) + '월'\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as mtick\n",
        "import seaborn as sns\n",
        "\n",
        "# 색상 정의\n",
        "color_dict = {\n",
        "    'EV': '#d62728',     # 빨강\n",
        "    'B6': '#2ca02c',     # 초록\n",
        "    'UA': '#1f77b4',     # 파랑\n",
        "    'Total': '#7f7f7f'   # 회색\n",
        "}\n",
        "\n",
        "# 월 문자열 추가\n",
        "for df in [EV_total_group, B6_total_group, UA_total_group, total_group]:\n",
        "    df['month_str'] = df['month'].astype(str) + '월'\n",
        "\n",
        "# 그래프 그리기\n",
        "plt.figure(figsize=(14, 6))\n",
        "plt.title('항공사별 월별 지연 비율 (%)', fontsize=20, fontweight='bold')\n",
        "\n",
        "# 선 그래프 그리기\n",
        "for label, df in {\n",
        "    'EV': EV_total_group,\n",
        "    'B6': B6_total_group,\n",
        "    'UA': UA_total_group,\n",
        "    'Total': total_group\n",
        "}.items():\n",
        "    plt.plot(df['month_str'], df['delay_ratio_percent'], label=label,\n",
        "             marker='o',\n",
        "             linewidth=4 if label == 'EV' else 2,   # EV만 굵게!\n",
        "             color=color_dict[label])\n",
        "\n",
        "    # 텍스트 위치 및 표시 조건 설정\n",
        "    for x, y in zip(df['month_str'], df['delay_ratio_percent']):\n",
        "        if label == 'UA':\n",
        "            plt.text(x, y - 2, f\"{y:.1f}%\", ha='center', va='top', fontsize=15, color=color_dict[label])\n",
        "        elif label == 'EV':\n",
        "            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, \n",
        "                     color=color_dict[label], fontweight='bold')  \n",
        "        else:\n",
        "            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, color=color_dict[label])\n",
        "\n",
        "# y축 퍼센트 포맷\n",
        "plt.ylim(8, 65)\n",
        "plt.ylabel('지연 비율 (%)', fontsize=12)\n",
        "plt.xlabel('월', fontsize=12)\n",
        "plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n",
        "\n",
        "# 범례\n",
        "plt.legend(title='항공사', fontsize=10, title_fontsize=12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "a5f531b4",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "<!-- ::: -->\n",
        "\n",
        "<!-- ::: {.column width=\"40%\"} -->\n",
        "\n",
        "- 상반기 타 항공사 대비 높은 지연율을 보임.\n",
        "\n",
        "<!-- :::\n",
        "::::: -->\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "::: {.notes}\n",
        "\n",
        "[“출발 시간(dep_time)과 출발 지연(dep_delay)이 동시에 결측인 경우, 항공편이 실제로 이륙하지 않은 것으로 간주했습니다. 이는 일반적으로 결항(Canceled)된 항공편으로 판단되며, 우리는 실제 운항된 항공편의 지연만 분석하고자 했기 때문에 해당 데이터를 제거했습니다.”]\n",
        "\n",
        ":::\n",
        "\n",
        "\n",
        "# 2. ExpressJet(EV) 항공사 분석 내용\n",
        "\n",
        "---\n",
        "\n",
        "<!-- ## {.scrollable} -->\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - 항공사 별 항공기 제조사\n",
        "\n",
        "##### EV"
      ],
      "id": "d2d0ac79"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# 사용할 carrier만 필터링\n",
        "big3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n",
        "# 항공사별 제조사 그룹화\n",
        "plane_features = (\n",
        "    big3\n",
        "    .dropna(subset=['manufacturer', 'seats'])\n",
        "    .groupby(['carrier', 'manufacturer'])\n",
        "    .agg(\n",
        "        avg_seats=('seats', 'mean'),\n",
        "        avg_engines=('engines', 'mean'),\n",
        "        count=('tailnum', 'nunique')\n",
        "    )\n",
        "    .reset_index()\n",
        ")\n",
        "# 항공사별 좌석수 평균 확인\n",
        "avg_seats = (\n",
        "    big3.dropna(subset=['seats'])\n",
        "    .groupby('carrier')['seats']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        "    .rename(columns={'seats': 'avg_seats'})\n",
        ")\n",
        "##################################################################################\n",
        "# 시각화\n",
        "##################################################################################\n",
        "# 3사 비행기의 제조사 비율 시각화###############\n",
        "def preprocess_carrier_pie(carrier_code):\n",
        "    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n",
        "    df_sub = df_sub.sort_values(by='count', ascending=False)\n",
        "\n",
        "    total_planes = df_sub['count'].sum()\n",
        "    df_sub['ratio'] = df_sub['count'] / total_planes\n",
        "\n",
        "    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n",
        "    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n",
        "\n",
        "    if not minor.empty:\n",
        "        other_row = pd.DataFrame({\n",
        "            'manufacturer': ['OTHER'],\n",
        "            'count': [minor['count'].sum()],\n",
        "            'ratio': [minor['count'].sum() / total_planes]\n",
        "        })\n",
        "        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n",
        "    else:\n",
        "        major = df_sub[['manufacturer', 'count', 'ratio']]\n",
        "\n",
        "    major = major.reset_index(drop=True)\n",
        "    return major, total_planes\n",
        "\n",
        "manufacturer_colors = {\n",
        "    'BOEING': '#1f77b4',\n",
        "    'AIRBUS': '#ff7f0e',\n",
        "    'MCDONNELL DOUGLAS': '#2ca02c',\n",
        "    'EMBRAER': '#d62728',\n",
        "    'BOMBARDIER': '#9467bd',\n",
        "    'CANADAIR': '#8c564b',\n",
        "    'OTHER': '#aaaaaa'\n",
        "}\n",
        "\n",
        "############### EV\n",
        "major, total_planes = preprocess_carrier_pie('EV')\n",
        "labels = major['manufacturer']\n",
        "sizes = major['count']\n",
        "colors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n",
        "\n",
        "ratios = sizes / sizes.sum()\n",
        "angles = ratios * 360\n",
        "cum_sizes = angles.cumsum()\n",
        "start_angles = np.concatenate(([0], cum_sizes[:-1]))\n",
        "\n",
        "max_idx = major['count'].idxmax()\n",
        "top_idx = major['count'].nlargest(3).index.tolist()\n",
        "top_idx.remove(max_idx)\n",
        "second_idx = top_idx[0]\n",
        "\n",
        "start_angle_2nd = start_angles[second_idx]\n",
        "end_angle_2nd = cum_sizes[second_idx]\n",
        "mid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\n",
        "startangle = 60 - mid_angle_2nd\n",
        "\n",
        "plt.figure(figsize=(7, 7))\n",
        "wedges, _ = plt.pie(\n",
        "    sizes,\n",
        "    labels=None,\n",
        "    startangle=startangle,\n",
        "    colors=colors,\n",
        "    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n",
        ")\n",
        "\n",
        "top2_idx = major['count'].nlargest(2).index.tolist()\n",
        "for i, w in enumerate(wedges):\n",
        "    if i in top2_idx:\n",
        "        angle = (w.theta2 + w.theta1) / 2\n",
        "        angle_rad = np.deg2rad(angle)\n",
        "        r = 0.55\n",
        "        x = r * np.cos(angle_rad)\n",
        "        y = r * np.sin(angle_rad)\n",
        "        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n",
        "                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n",
        "        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n",
        "                 fontsize=12, color='black')\n",
        "\n",
        "plt.title('EV 항공사의 제조사 비율', fontsize=16, pad=30)\n",
        "plt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\n",
        "plt.axis('equal')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "5916080d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - 항공사 별 항공기 제조사\n",
        "\n",
        "##### UA"
      ],
      "id": "b33dd9f9"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# 사용할 carrier만 필터링\n",
        "big3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n",
        "# 항공사별 제조사 그룹화\n",
        "plane_features = (\n",
        "    big3\n",
        "    .dropna(subset=['manufacturer', 'seats'])\n",
        "    .groupby(['carrier', 'manufacturer'])\n",
        "    .agg(\n",
        "        avg_seats=('seats', 'mean'),\n",
        "        avg_engines=('engines', 'mean'),\n",
        "        count=('tailnum', 'nunique')\n",
        "    )\n",
        "    .reset_index()\n",
        ")\n",
        "# 항공사별 좌석수 평균 확인\n",
        "avg_seats = (\n",
        "    big3.dropna(subset=['seats'])\n",
        "    .groupby('carrier')['seats']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        "    .rename(columns={'seats': 'avg_seats'})\n",
        ")\n",
        "##################################################################################\n",
        "# 시각화\n",
        "##################################################################################\n",
        "# 3사 비행기의 제조사 비율 시각화###############\n",
        "def preprocess_carrier_pie(carrier_code):\n",
        "    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n",
        "    df_sub = df_sub.sort_values(by='count', ascending=False)\n",
        "\n",
        "    total_planes = df_sub['count'].sum()\n",
        "    df_sub['ratio'] = df_sub['count'] / total_planes\n",
        "\n",
        "    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n",
        "    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n",
        "\n",
        "    if not minor.empty:\n",
        "        other_row = pd.DataFrame({\n",
        "            'manufacturer': ['OTHER'],\n",
        "            'count': [minor['count'].sum()],\n",
        "            'ratio': [minor['count'].sum() / total_planes]\n",
        "        })\n",
        "        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n",
        "    else:\n",
        "        major = df_sub[['manufacturer', 'count', 'ratio']]\n",
        "\n",
        "    major = major.reset_index(drop=True)\n",
        "    return major, total_planes\n",
        "\n",
        "manufacturer_colors = {\n",
        "    'BOEING': '#1f77b4',\n",
        "    'AIRBUS': '#ff7f0e',\n",
        "    'MCDONNELL DOUGLAS': '#2ca02c',\n",
        "    'EMBRAER': '#d62728',\n",
        "    'BOMBARDIER': '#9467bd',\n",
        "    'CANADAIR': '#8c564b',\n",
        "    'OTHER': '#aaaaaa'\n",
        "}\n",
        "\n",
        "############### EV\n",
        "major, total_planes = preprocess_carrier_pie('UA')\n",
        "labels = major['manufacturer']\n",
        "sizes = major['count']\n",
        "colors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n",
        "\n",
        "ratios = sizes / sizes.sum()\n",
        "angles = ratios * 360\n",
        "cum_sizes = angles.cumsum()\n",
        "start_angles = np.concatenate(([0], cum_sizes[:-1]))\n",
        "\n",
        "max_idx = major['count'].idxmax()\n",
        "top_idx = major['count'].nlargest(3).index.tolist()\n",
        "top_idx.remove(max_idx)\n",
        "second_idx = top_idx[0]\n",
        "\n",
        "start_angle_2nd = start_angles[second_idx]\n",
        "end_angle_2nd = cum_sizes[second_idx]\n",
        "mid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\n",
        "startangle = 60 - mid_angle_2nd\n",
        "\n",
        "plt.figure(figsize=(7, 7))\n",
        "wedges, _ = plt.pie(\n",
        "    sizes,\n",
        "    labels=None,\n",
        "    startangle=startangle,\n",
        "    colors=colors,\n",
        "    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n",
        ")\n",
        "\n",
        "top2_idx = major['count'].nlargest(2).index.tolist()\n",
        "for i, w in enumerate(wedges):\n",
        "    if i in top2_idx:\n",
        "        angle = (w.theta2 + w.theta1) / 2\n",
        "        angle_rad = np.deg2rad(angle)\n",
        "        r = 0.55\n",
        "        x = r * np.cos(angle_rad)\n",
        "        y = r * np.sin(angle_rad)\n",
        "        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n",
        "                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n",
        "        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n",
        "                 fontsize=12, color='black')\n",
        "\n",
        "plt.title('UA 항공사의 제조사 비율', fontsize=16, pad=30)\n",
        "plt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\n",
        "plt.axis('equal')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "7791db41",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - 항공사 별 항공기 제조사\n",
        "\n",
        "##### B6"
      ],
      "id": "098e0306"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "# 사용할 carrier만 필터링\n",
        "big3 = flights_cleaned[flights_cleaned['carrier'].isin(['UA', 'B6', 'EV'])]\n",
        "# 항공사별 제조사 그룹화\n",
        "plane_features = (\n",
        "    big3\n",
        "    .dropna(subset=['manufacturer', 'seats'])\n",
        "    .groupby(['carrier', 'manufacturer'])\n",
        "    .agg(\n",
        "        avg_seats=('seats', 'mean'),\n",
        "        avg_engines=('engines', 'mean'),\n",
        "        count=('tailnum', 'nunique')\n",
        "    )\n",
        "    .reset_index()\n",
        ")\n",
        "# 항공사별 좌석수 평균 확인\n",
        "avg_seats = (\n",
        "    big3.dropna(subset=['seats'])\n",
        "    .groupby('carrier')['seats']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        "    .rename(columns={'seats': 'avg_seats'})\n",
        ")\n",
        "##################################################################################\n",
        "# 시각화\n",
        "##################################################################################\n",
        "# 3사 비행기의 제조사 비율 시각화###############\n",
        "def preprocess_carrier_pie(carrier_code):\n",
        "    df_sub = plane_features[plane_features['carrier'] == carrier_code].copy()\n",
        "    df_sub = df_sub.sort_values(by='count', ascending=False)\n",
        "\n",
        "    total_planes = df_sub['count'].sum()\n",
        "    df_sub['ratio'] = df_sub['count'] / total_planes\n",
        "\n",
        "    major = df_sub[df_sub['ratio'] >= 0.02].copy()\n",
        "    minor = df_sub[df_sub['ratio'] < 0.02].copy()\n",
        "\n",
        "    if not minor.empty:\n",
        "        other_row = pd.DataFrame({\n",
        "            'manufacturer': ['OTHER'],\n",
        "            'count': [minor['count'].sum()],\n",
        "            'ratio': [minor['count'].sum() / total_planes]\n",
        "        })\n",
        "        major = pd.concat([major[['manufacturer', 'count', 'ratio']], other_row], ignore_index=True)\n",
        "    else:\n",
        "        major = df_sub[['manufacturer', 'count', 'ratio']]\n",
        "\n",
        "    major = major.reset_index(drop=True)\n",
        "    return major, total_planes\n",
        "\n",
        "manufacturer_colors = {\n",
        "    'BOEING': '#1f77b4',\n",
        "    'AIRBUS': '#ff7f0e',\n",
        "    'MCDONNELL DOUGLAS': '#2ca02c',\n",
        "    'EMBRAER': '#d62728',\n",
        "    'BOMBARDIER': '#9467bd',\n",
        "    'CANADAIR': '#8c564b',\n",
        "    'OTHER': '#aaaaaa'\n",
        "}\n",
        "\n",
        "############### EV\n",
        "major, total_planes = preprocess_carrier_pie('B6')\n",
        "labels = major['manufacturer']\n",
        "sizes = major['count']\n",
        "colors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in labels]\n",
        "\n",
        "ratios = sizes / sizes.sum()\n",
        "angles = ratios * 360\n",
        "cum_sizes = angles.cumsum()\n",
        "start_angles = np.concatenate(([0], cum_sizes[:-1]))\n",
        "\n",
        "max_idx = major['count'].idxmax()\n",
        "top_idx = major['count'].nlargest(3).index.tolist()\n",
        "top_idx.remove(max_idx)\n",
        "second_idx = top_idx[0]\n",
        "\n",
        "start_angle_2nd = start_angles[second_idx]\n",
        "end_angle_2nd = cum_sizes[second_idx]\n",
        "mid_angle_2nd = (start_angle_2nd + end_angle_2nd) / 2\n",
        "startangle = 60 - mid_angle_2nd\n",
        "\n",
        "plt.figure(figsize=(7, 7))\n",
        "wedges, _ = plt.pie(\n",
        "    sizes,\n",
        "    labels=None,\n",
        "    startangle=startangle,\n",
        "    colors=colors,\n",
        "    wedgeprops={'edgecolor': 'white', 'linewidth': 1},\n",
        ")\n",
        "\n",
        "top2_idx = major['count'].nlargest(2).index.tolist()\n",
        "for i, w in enumerate(wedges):\n",
        "    if i in top2_idx:\n",
        "        angle = (w.theta2 + w.theta1) / 2\n",
        "        angle_rad = np.deg2rad(angle)\n",
        "        r = 0.55\n",
        "        x = r * np.cos(angle_rad)\n",
        "        y = r * np.sin(angle_rad)\n",
        "        plt.text(x, y + 0.05, f\"{(sizes.iloc[i] / total_planes) * 100:.1f}% ({sizes.iloc[i]}대)\",\n",
        "                 ha='center', va='center', fontsize=13, fontweight='bold', color='black')\n",
        "        plt.text(x, y - 0.05, labels.iloc[i], ha='center', va='center',\n",
        "                 fontsize=12, color='black')\n",
        "\n",
        "plt.title('B6 항공사의 제조사 비율', fontsize=16, pad=30)\n",
        "plt.text(1.1, -1.2, f'총 비행기 수: {total_planes}', fontsize=12, ha='right')\n",
        "plt.axis('equal')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "d8af9179",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - 제조사 별 평균 좌석 수 비교"
      ],
      "id": "724472b8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 주요 제조사\n",
        "major_manufacturers = ['BOEING', 'EMBRAER', 'AIRBUS', 'MCDONNELL DOUGLAS']\n",
        "\n",
        "# 평균 좌석 수 계산\n",
        "if 'avg_seats' not in plane_features.columns:\n",
        "    avg_seats_by_mfg = (\n",
        "        big3.dropna(subset=['manufacturer', 'seats'])\n",
        "        .groupby('manufacturer')['seats']\n",
        "        .mean()\n",
        "        .reset_index()\n",
        "    )\n",
        "else:\n",
        "    avg_seats_by_mfg = plane_features.groupby('manufacturer')['avg_seats'].mean().reset_index()\n",
        "\n",
        "# 주요 제조사만 필터링\n",
        "avg_seats_by_mfg = avg_seats_by_mfg[avg_seats_by_mfg['manufacturer'].isin(major_manufacturers)]\n",
        "\n",
        "# 색상 설정\n",
        "colors = [manufacturer_colors.get(mfg, '#cccccc') for mfg in avg_seats_by_mfg['manufacturer']]\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(8, 6))\n",
        "bars = plt.bar(\n",
        "    avg_seats_by_mfg['manufacturer'],\n",
        "    avg_seats_by_mfg['seats'] if 'seats' in avg_seats_by_mfg.columns else avg_seats_by_mfg['avg_seats'],\n",
        "    color=colors\n",
        ")\n",
        "\n",
        "# 타이틀 & 축 설정\n",
        "plt.title('제조사별 평균 좌석 수 비교', fontsize=18, fontweight='bold')\n",
        "plt.xlabel('제조사', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 좌석 수', fontsize=14, fontweight='bold')\n",
        "\n",
        "# 제조사 이름 글꼴 키우고 볼드 처리\n",
        "plt.xticks(fontsize=12, fontweight='bold')\n",
        "plt.yticks(fontsize=12)\n",
        "\n",
        "# 막대 위에 수치 표시\n",
        "for bar in bars:\n",
        "    height = bar.get_height()\n",
        "    x = bar.get_x() + bar.get_width() / 2\n",
        "    plt.text(x, height + 2, f'{height:.0f}개', ha='center', va='bottom', fontsize=14, fontweight='bold')\n",
        "\n",
        "plt.ylim(0, max([bar.get_height() for bar in bars]) + 20)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "d93fbae9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - 항공사 별 평균 좌석 수"
      ],
      "id": "2b880cb8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 각 항공사별 평균 좌석수 시각화\n",
        "# 색상 고정\n",
        "carrier_colors = {\n",
        "    'EV': '#d62728',   # Red\n",
        "    'UA': '#1f77b4',   # Blue\n",
        "    'B6': '#1f77b4'    # Green\n",
        "}\n",
        "\n",
        "# 정렬\n",
        "avg_seats_sorted = avg_seats.sort_values(by='avg_seats', ascending=False).reset_index(drop=True)\n",
        "\n",
        "# 색상 리스트 생성\n",
        "bar_colors = [carrier_colors.get(carrier, 'gray') for carrier in avg_seats_sorted['carrier']]\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(9, 6))\n",
        "bars = sns.barplot(data=avg_seats_sorted, x='carrier', y='avg_seats', palette=bar_colors)\n",
        "\n",
        "# 수치 텍스트 박스 추가\n",
        "for bar, value in zip(bars.patches, avg_seats_sorted['avg_seats']):\n",
        "    bars.annotate(f\"{value:.1f}\",\n",
        "                  (bar.get_x() + bar.get_width() / 2, bar.get_height()),\n",
        "                  ha='center', va='bottom',\n",
        "                  fontsize=13, fontweight='bold',\n",
        "                  bbox=dict(boxstyle=\"round,pad=0.3\", fc=\"white\", ec=\"black\", lw=0.5))\n",
        "\n",
        "# 제목과 라벨\n",
        "plt.title(\"항공사별 평균 좌석 수\", fontsize=18, weight='bold')\n",
        "plt.xlabel(\"항공사\", fontsize=13)\n",
        "plt.ylabel(\"평균 좌석 수\", fontsize=13)\n",
        "plt.ylim(0, avg_seats_sorted['avg_seats'].max() + 30)\n",
        "\n",
        "# 범례 수동 추가\n",
        "custom_labels = [plt.Rectangle((0,0),1,1, color=carrier_colors[c]) for c in avg_seats_sorted['carrier']]\n",
        "plt.legend(custom_labels, avg_seats_sorted['carrier'], title=\"항공사\", loc='upper right')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "892fe71c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. 항공사 별 항공기 제조사 및 좌석 수 비교 <br>\n",
        "\n",
        "##### - EV 항공사 기체 좌석 수"
      ],
      "id": "73b60616"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "EV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n",
        "EV_flight=EV_total[['carrier','distance','air_time']]\n",
        "#ev 항공사 기체 촤석 분포\n",
        "# 한글 폰트 설정 (Windows 기준)\n",
        "plt.rcParams['font.family'] = 'Malgun Gothic'\n",
        "plt.rcParams['axes.unicode_minus'] = False\n",
        "\n",
        "# EV 항공사 좌석 정보 준비\n",
        "EV_seats = EV_total[['seats']].dropna()\n",
        "\n",
        "# 좌석 구간 설정\n",
        "bins = [0, 50, 70, 90, 110, 130, 150, float('inf')]\n",
        "labels = ['~50석', '51~70석', '71~90석', '91~110석', '111~130석', '131~150석', '151석 이상']\n",
        "EV_seats['좌석구간'] = pd.cut(EV_seats['seats'], bins=bins, labels=labels, right=False)\n",
        "\n",
        "# 좌석 구간별 비율 계산\n",
        "seat_distribution = (\n",
        "    EV_seats['좌석구간']\n",
        "    .value_counts(normalize=True)\n",
        "    .sort_index() * 100\n",
        ")\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(10, 6))\n",
        "colors = sns.color_palette('pastel', len(seat_distribution))\n",
        "barplot = sns.barplot(x=seat_distribution.index, y=seat_distribution.values, palette=colors)\n",
        "\n",
        "# y축 범위 명시적으로 지정 (최대 100)\n",
        "plt.ylim(0, 100)\n",
        "\n",
        "# 제목 및 축 설정\n",
        "plt.title('EV 항공사 기체 좌석 수 분포', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('좌석 수 구간', fontsize=12)\n",
        "plt.ylabel('비율 (%)', fontsize=12)\n",
        "\n",
        "# 수치 라벨 (막대 위에 충분히 띄워서)\n",
        "for i, value in enumerate(seat_distribution.values):\n",
        "    plt.text(i, value + 2, f'{value:.1f}%', ha='center', va='bottom', fontsize=10)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "c88f1143",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: {.notes}\n",
        "\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "### 2. 비행 거리 비교: 단/중/장 거리 비교<br>"
      ],
      "id": "ad4fbaab"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 1. UA , 57782\n",
        "# distance, air_time 확인\n",
        "UA_flight=UA_total[['carrier','distance','air_time']]\n",
        "UA_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\n",
        "# distance는 내림차순, air_time은 오름차순으로 정렬( 동일한 거리에서 시간이 짧을 수록 비행 good)\n",
        "UA_flight.describe()\n",
        "\n",
        "# 2. B6, 54049\n",
        "# distance, air_time 확인\n",
        "B6_flight= B6_total[['carrier','distance','air_time']]\n",
        "B6_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\n",
        "B6_flight.describe()\n",
        "\n",
        "# 3. EV, 51108\n",
        "# distance, air_time 확인\n",
        "EV_flight=EV_total[['carrier','distance','air_time']]\n",
        "EV_flight.sort_values(by=['distance','air_time'], ascending=[False,True])\n",
        "EV_flight.describe()\n",
        "\n",
        "'''\n",
        "United Airline\n",
        "700 mile 미만 -> short \n",
        "700 mile 이상 3000 mile 미만 -> medium\n",
        "3000 mile 이상 -> long\n",
        "'''\n",
        "\n",
        "# 상위 항공사 3개를 합친 새로운 DataFrame 생성\n",
        "top3_flights = pd.concat([UA_flight, B6_flight, EV_flight], ignore_index=True)\n",
        "\n",
        "# 길이 (mile) 에 따른 기준 생성\n",
        "def categorize_distance(mile):\n",
        "    if mile < 700:\n",
        "        return 'short'\n",
        "    elif mile < 3000:\n",
        "        return 'medium'\n",
        "    else:\n",
        "        return 'long'\n",
        "    \n",
        "# length라는 새 column을 만들어 거리를 비교    \n",
        "top3_flights['length'] = top3_flights['distance'].apply(categorize_distance)    \n",
        "\n",
        "# pivot table 생성\n",
        "pivot_flight = pd.pivot_table(\n",
        "    top3_flights,\n",
        "    index='carrier',\n",
        "    columns='length',\n",
        "    values='distance',      \n",
        "    aggfunc='count',\n",
        "    fill_value=0\n",
        ").reset_index()\n",
        "pivot_flight.columns.name = None\n",
        "pivot_flight = pivot_flight[['carrier', 'short', 'medium', 'long']]\n",
        "pivot_flight \n",
        "##############################################################3\n",
        "# 항공사별 단거리 중거리 장거리 시각화\n",
        "#########################################################\n",
        "# 거리별 총합을 기준으로 비율 계산\n",
        "distance_ratio = pivot_flight.copy()\n",
        "total = distance_ratio[['short', 'medium', 'long']].sum(axis=1)\n",
        "distance_ratio['short_ratio'] = (distance_ratio['short'] / total * 100).round(2)\n",
        "distance_ratio['medium_ratio'] = (distance_ratio['medium'] / total * 100).round(2)\n",
        "distance_ratio['long_ratio'] = (distance_ratio['long'] / total * 100).round(2)\n",
        "\n",
        "# melt해서 long-form으로 변환\n",
        "distance_ratio_melted = pd.melt(\n",
        "    distance_ratio,\n",
        "    id_vars='carrier',\n",
        "    value_vars=['short_ratio', 'medium_ratio', 'long_ratio'],\n",
        "    var_name='distance_group',\n",
        "    value_name='비율'\n",
        ")\n",
        "\n",
        "# distance_group 한글 라벨 정리\n",
        "distance_ratio_melted['distance_group'] = distance_ratio_melted['distance_group'].map({\n",
        "    'short_ratio': '단거리',\n",
        "    'medium_ratio': '중거리',\n",
        "    'long_ratio': '장거리'\n",
        "})\n",
        "\n",
        "# 시각화\n",
        "plt.figure(figsize=(10, 6))\n",
        "ax = sns.barplot(data=distance_ratio_melted, x='carrier', y='비율', hue='distance_group')\n",
        "\n",
        "# 막대 위에 비율 표시\n",
        "for container in ax.containers:\n",
        "    for bar in container:\n",
        "        height = bar.get_height()\n",
        "        if height > 0:\n",
        "            ax.text(\n",
        "                bar.get_x() + bar.get_width() / 2,\n",
        "                height + 0.5,\n",
        "                f'{height:.1f}%',\n",
        "                ha='center',\n",
        "                va='bottom',\n",
        "                fontsize=9\n",
        "            )\n",
        "\n",
        "plt.title('항공사별 거리 구간별 항공편 비율 (%)', fontsize=15, fontweight='bold')\n",
        "plt.xlabel('항공사')\n",
        "plt.ylabel('항공편 비율 (%)')\n",
        "plt.legend(title='비행 거리 구간')\n",
        "plt.grid(axis='y')\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "b9262686",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 3. 공항별 지연 비교: 출발 공항 3군데에 대해서 항공사의 지연 분석<br>"
      ],
      "id": "d8d1c8e3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# 1. 세 항공사만 필터링\n",
        "selected_carriers = ['UA', 'B6', 'EV']\n",
        "big3 = flights_cleaned[flights_cleaned['carrier'].isin(selected_carriers)]\n",
        "\n",
        "# 2. 전체 항공편 수 (carrier + origin 기준)\n",
        "total_counts = (\n",
        "    big3.groupby(['carrier', 'origin'])\n",
        "    .size()\n",
        "    .reset_index(name='total_flights')\n",
        ")\n",
        "\n",
        "# 3. 15분 이상 지연된 항공편만 필터링\n",
        "big3_delay = big3[big3['dep_delay'] >= 15]\n",
        "\n",
        "# 4. 지연된 항공편 수 (carrier + origin 기준)\n",
        "delay_counts = (\n",
        "    big3_delay.groupby(['carrier', 'origin'])\n",
        "    .size()\n",
        "    .reset_index(name='delay_count')\n",
        ")\n",
        "\n",
        "# 5. 평균 지연 시간 (기존 코드 유지)\n",
        "airport_delay = (\n",
        "    big3_delay.dropna(subset=['dep_delay'])\n",
        "    .groupby(['carrier', 'origin'])['dep_delay']\n",
        "    .mean()\n",
        "    .reset_index()\n",
        ")\n",
        "##\n",
        "# 6. total_flights와 delay_count를 airport_delay에 merge\n",
        "airport_delay = pd.merge(airport_delay, total_counts, on=['carrier', 'origin'], how='left')\n",
        "airport_delay = pd.merge(airport_delay, delay_counts, on=['carrier', 'origin'], how='left')\n",
        "\n",
        "# 7. 결측값 처리 및 지연 비율 계산\n",
        "airport_delay['delay_count'] = airport_delay['delay_count'].fillna(0)\n",
        "airport_delay['delay_ratio'] = airport_delay['delay_count'] / airport_delay['total_flights']\n",
        "\n",
        "# 8. carrier 순서 정렬\n",
        "carrier_order = ['UA', 'B6', 'EV']\n",
        "airport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n",
        "\n",
        "# 9. 공항 이름 붙이기 (origin -> 공항명)\n",
        "airport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\n",
        "airport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')\n",
        "######################################################################3\n",
        "######################################################################\n",
        "###############################################################################3\n",
        "##################################################################################3\n",
        "\n",
        "# 각 공항별 항공사 지연 시간 시각화\n",
        "# carrier별 색상 딕셔너리 (EV 빨강, 나머지 파랑)\n",
        "palette_dict = {\n",
        "    'EV': '#d62728',\n",
        "    'UA': '#1f77b4',\n",
        "    'B6': '#1f77b4',\n",
        "}\n",
        "\n",
        "plt.figure(figsize=(12, 7))\n",
        "barplot = sns.barplot(\n",
        "    data=airport_delay,\n",
        "    x='origin',\n",
        "    y='dep_delay',   # 평균 지연 시간 컬럼명으로 맞춰주세요\n",
        "    hue='carrier',\n",
        "    palette=palette_dict\n",
        ")\n",
        "\n",
        "plt.title('공항별 항공사 평균 출발 지연 시간 (분)', fontsize=20, fontweight='bold')\n",
        "plt.xlabel('출발 공항 코드', fontsize=16, fontweight='bold')\n",
        "plt.ylabel('평균 지연 시간 (분)', fontsize=16, fontweight='bold')\n",
        "\n",
        "# 막대 위에 지연 시간 표시 (0보다 클 때만)\n",
        "for p in barplot.patches:\n",
        "    height = p.get_height()\n",
        "    if height > 0:\n",
        "        plt.text(\n",
        "            p.get_x() + p.get_width()/2,\n",
        "            height + 0.5,\n",
        "            f'{height:.1f}분',\n",
        "            ha='center',\n",
        "            va='bottom',\n",
        "            fontsize=14,\n",
        "            fontweight='bold'\n",
        "        )\n",
        "\n",
        "plt.legend(title='항공사', title_fontsize=14, fontsize=12)\n",
        "plt.xticks(fontsize=14, fontweight='bold')\n",
        "plt.yticks(fontsize=14)\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "# 원하는 carrier 순서로 지정\n",
        "carrier_order = ['UA', 'B6', 'EV']\n",
        "airport_delay['carrier'] = pd.Categorical(airport_delay['carrier'], categories=carrier_order, ordered=True)\n",
        "\n",
        "# 공항 이름 붙이기 (origin code -> 공항명)\n",
        "airport_names = df_airports[['faa', 'name']].rename(columns={'faa': 'origin', 'name': 'airport_name'})\n",
        "airport_delay = pd.merge(airport_delay, airport_names, on='origin', how='left')"
      ],
      "id": "3ff42baa",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 4. 월별 지연 파악 <br>"
      ],
      "id": "0e655131"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "###################################################################################\n",
        "###################################################################################\n",
        "#######################################################################################\n",
        "# 월별 운항 횟수 시각화\n",
        "########################################################################\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.lines import Line2D\n",
        "\n",
        "# 데이터\n",
        "labels = ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월', '9월', '10월', '11월', '12월']\n",
        "EV_counts = [4300, 4150, 4500, 4600, 4550, 4600, 4700, 4750, 4540, 4810, 4600, 4380]\n",
        "B6_counts = [4400, 4200, 4700, 4650, 4580, 4550, 4900, 4940, 4700, 4700, 4630, 4650]\n",
        "UA_counts = [4500, 4350, 4600, 4610, 4590, 4550, 4920, 4900, 4800, 4750, 4700, 4390]\n",
        "Total_counts = [27500, 27300, 28000, 27850, 27900, 27600, 28100, 28300, 27900, 27800, 27700, 27400]\n",
        "\n",
        "# 색상 설정\n",
        "color_dict = {\n",
        "    'EV': '#d62728',\n",
        "    'B6': '#2ca02c',\n",
        "    'UA': '#1f77b4',\n",
        "    'Total': '#7f7f7f'\n",
        "}\n",
        "\n",
        "# Plot 설정\n",
        "fig, (ax_upper, ax_lower) = plt.subplots(2, 1, figsize=(14, 8), sharex=True,\n",
        "                                         gridspec_kw={'height_ratios': [1, 3]})\n",
        "fig.suptitle('항공사별 월별 운항 횟수', fontsize=20, fontweight='bold')\n",
        "\n",
        "x = range(len(labels))\n",
        "\n",
        "# 선 그래프 그리기\n",
        "ax_lower.plot(x, EV_counts, label='EV', marker='o', color=color_dict['EV'], linewidth=4)\n",
        "ax_lower.plot(x, B6_counts, label='B6', marker='o', color=color_dict['B6'])\n",
        "ax_lower.plot(x, UA_counts, label='UA', marker='o', color=color_dict['UA'])\n",
        "ax_upper.plot(x, Total_counts, label='Total', marker='o', color=color_dict['Total'])\n",
        "\n",
        "# 점 위/아래 텍스트 표시\n",
        "for i in x:\n",
        "    ax_lower.text(i, EV_counts[i] - 70, str(EV_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['EV'])     # EV 아래\n",
        "#    ax_lower.text(i, B6_counts[i] + 50, str(B6_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['B6'])  # B6 위\n",
        "#   ax_lower.text(i, UA_counts[i] - 70, str(UA_counts[i]), ha='center', va='top', fontsize=15, color=color_dict['UA'])     # UA 아래\n",
        "    ax_upper.text(i, Total_counts[i] + 150, str(Total_counts[i]), ha='center', va='bottom', fontsize=15, color=color_dict['Total'])  # Total 위\n",
        "\n",
        "# Y축 범위\n",
        "ax_lower.set_ylim(4000, 5100)\n",
        "ax_upper.set_ylim(27000, 28500)\n",
        "\n",
        "# 물결선 표시\n",
        "d = .01\n",
        "kwargs = dict(transform=ax_upper.transAxes, color='k', clip_on=False)\n",
        "ax_upper.plot((-d, +d), (-d, +d), **kwargs)\n",
        "ax_upper.plot((1 - d, 1 + d), (-d, +d), **kwargs)\n",
        "kwargs.update(transform=ax_lower.transAxes)\n",
        "ax_lower.plot((-d, +d), (1 - d, 1 + d), **kwargs)\n",
        "ax_lower.plot((1 - d, 1 + d), (1 - d, 1 + d), **kwargs)\n",
        "\n",
        "# x축 설정\n",
        "ax_lower.set_xticks(x)\n",
        "ax_lower.set_xticklabels(labels, fontsize=12)\n",
        "ax_lower.set_xlabel('월', fontsize=12)\n",
        "ax_lower.set_ylabel('운항 횟수', fontsize=12)\n",
        "\n",
        "# 범례\n",
        "custom_lines = [\n",
        "    Line2D([0], [0], color=color_dict['UA'], linestyle='-', marker='o', linewidth=2, label='UA'),\n",
        "    Line2D([0], [0], color=color_dict['B6'], linestyle='-', marker='o', linewidth=2, label='B6'),\n",
        "    Line2D([0], [0], color=color_dict['EV'], linestyle='-', marker='o', linewidth=2, label='EV')\n",
        "]\n",
        "ax_upper.legend(\n",
        "    handles=custom_lines,\n",
        "    title='항공사',\n",
        "    fontsize=10,\n",
        "    title_fontsize=12,\n",
        "    loc='upper left',\n",
        "    bbox_to_anchor=(1.01, 1.0)\n",
        ")\n",
        "\n",
        "plt.subplots_adjust(hspace=0.05)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "34328a69",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 4. 월별 지연 파악 <br>"
      ],
      "id": "6f6c9dfe"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "EV_total = flights_cleaned[flights_cleaned['carrier']=='EV']\n",
        "EV_flight=EV_total[['carrier','distance','air_time']]\n",
        "\n",
        "# 비율(%) 및 라벨 처리\n",
        "for df in [UA_total_group, B6_total_group, EV_total_group, total_group]:\n",
        "    df['delay_ratio_percent'] = df['delay_ratio'] * 100\n",
        "    df['month_str'] = df['month'].astype(str) + '월'\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as mtick\n",
        "import seaborn as sns\n",
        "\n",
        "# 색상 정의\n",
        "color_dict = {\n",
        "    'EV': '#d62728',     # 빨강\n",
        "    'B6': '#2ca02c',     # 초록\n",
        "    'UA': '#1f77b4',     # 파랑\n",
        "    'Total': '#7f7f7f'   # 회색\n",
        "}\n",
        "\n",
        "# 월 문자열 추가\n",
        "for df in [EV_total_group, B6_total_group, UA_total_group, total_group]:\n",
        "    df['month_str'] = df['month'].astype(str) + '월'\n",
        "\n",
        "# 그래프 그리기\n",
        "plt.figure(figsize=(14, 8))\n",
        "plt.title('항공사별 월별 지연 비율 (%)', fontsize=20, fontweight='bold')\n",
        "\n",
        "# 선 그래프 그리기\n",
        "for label, df in {\n",
        "    'EV': EV_total_group,\n",
        "    'B6': B6_total_group,\n",
        "    'UA': UA_total_group,\n",
        "    'Total': total_group\n",
        "}.items():\n",
        "    plt.plot(df['month_str'], df['delay_ratio_percent'], label=label,\n",
        "             marker='o',\n",
        "             linewidth=4 if label == 'EV' else 2,   # EV만 굵게!\n",
        "             color=color_dict[label])\n",
        "\n",
        "    # 텍스트 위치 및 표시 조건 설정\n",
        "    for x, y in zip(df['month_str'], df['delay_ratio_percent']):\n",
        "        if label == 'UA':\n",
        "            plt.text(x, y - 2, f\"{y:.1f}%\", ha='center', va='top', fontsize=15, color=color_dict[label])\n",
        "        elif label == 'EV':\n",
        "            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, \n",
        "                     color=color_dict[label], fontweight='bold')  \n",
        "        else:\n",
        "            plt.text(x, y + 1.5, f\"{y:.1f}%\", ha='center', va='bottom', fontsize=15, color=color_dict[label])\n",
        "\n",
        "# y축 퍼센트 포맷\n",
        "plt.ylim(0, 70)\n",
        "plt.ylabel('지연 비율 (%)', fontsize=12)\n",
        "plt.xlabel('월', fontsize=12)\n",
        "plt.gca().yaxis.set_major_formatter(mtick.PercentFormatter())\n",
        "\n",
        "# 범례\n",
        "plt.legend(title='항공사', fontsize=10, title_fontsize=12)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "5179e277",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# ExpressJet(EV)\n",
        "- 단거리 위주의 소형 항공사이다!\n",
        "\n",
        "\n",
        "# 지연 원인 분석 \n",
        "\n",
        "---\n",
        "\n",
        "## {.scrollable}\n",
        "\n",
        "### 1. EV 기체의 회전율 문제: 'tailnum'에 따른 시간 간격을 비교"
      ],
      "id": "63314f5f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# EV 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\n",
        "ev_schedule = EV_total[['tailnum', 'month_day_time']].dropna()\n",
        "\n",
        "# 1. datetime 형식으로 먼저 변환\n",
        "ev_schedule['month_day_time'] = pd.to_datetime(ev_schedule['month_day_time'])\n",
        "# 시간순 정렬   # 수정사항 원래는 앞에 TAILNUM 이 있었는데 이럼 정렬 ㄴㄴ\n",
        "ev_schedule = ev_schedule.sort_values(['month_day_time'])\n",
        "\n",
        "# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n",
        "# diff()\n",
        "ev_schedule['time_gap'] = ev_schedule.groupby('tailnum')['month_day_time'].diff()\n",
        "\n",
        "# 값이 NaT인 경우, \n",
        "# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n",
        "\n",
        "# 간격을 시간(hour) 단위로 변경\n",
        "ev_schedule['gap_hours'] = ev_schedule['time_gap'].dt.total_seconds() / 3600\n",
        "\n",
        "# 3. 결과 확인\n",
        "ev_schedule['time_gap']\n",
        "\n",
        "# 4. 값 확인\n",
        "schedule_summary = ev_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n",
        "\n",
        "'''\n",
        "gap_hours에 대해서, \n",
        "\n",
        "'mean': 평균 비행 간격 (단위: 시간)\n",
        "\n",
        "'min': 가장 짧은 간격\n",
        "\n",
        "'count': 비행 횟수(정확히는 gap_hours 값이 있는 횟수 = 첫 비행 제외\n",
        "\n",
        "'''\n",
        "\n",
        "schedule_summary['count'].describe()\n",
        "\n",
        "schedule_summary.dropna()\n",
        "\n",
        "schedule_summary.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n",
        "\n",
        "top_planes = schedule_summary.sort_values('avg_gap_hr').head(10)\n",
        "\n",
        "top_planes_with_seats = pd.merge(\n",
        "    top_planes,\n",
        "    df_planes[['tailnum', 'seats']],\n",
        "    on='tailnum',\n",
        "    how='left'\n",
        ")\n",
        "##############################################################\n",
        "# EV 비행기 회전율 시각화\n",
        "################################################333\n",
        "# 색상: 상위 4개는 빨간색, 나머지는 파란색\n",
        "colors = ['#d62728' if i < 4 else '#1f77b4' for i in range(len(top_planes_with_seats))]\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "barplot = sns.barplot(data=top_planes_with_seats, x='tailnum', y='avg_gap_hr', palette=colors)\n",
        "\n",
        "plt.xticks(rotation=45, fontsize=12, fontweight='bold')\n",
        "plt.title('평균 비행 간격이 가장 짧은 10대 EV 항공기', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\n",
        "plt.grid(True)\n",
        "\n",
        "# 막대 위에 좌석 수 표시 (한글, 볼드, 글자 크기 업)\n",
        "for i, row in top_planes_with_seats.iterrows():\n",
        "    if pd.notna(row['seats']):\n",
        "        plt.text(\n",
        "            x=i,\n",
        "            y=row['avg_gap_hr'] + 0.2,\n",
        "            s=f\"{int(row['seats'])}석\",\n",
        "            ha='center',\n",
        "            va='bottom',\n",
        "            fontsize=12,\n",
        "            fontweight='bold'\n",
        "        )\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "53ff8bcf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 1. EV 기체의 회전율 문제: 'tailnum'에 따른 시간 간격을 비교\n",
        "\n",
        "::: {.panel-tabset}\n",
        "\n",
        "### UA"
      ],
      "id": "9ca46c1f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# UA 기체 회전율\n",
        "\n",
        "# UA 항공사의 기체 회전율 비교\n",
        "ua_schedule = UA_total[['tailnum', 'month_day_time']].dropna()\n",
        "\n",
        "# 1. datetime 형식으로 먼저 변환\n",
        "ua_schedule['month_day_time'] = pd.to_datetime(ua_schedule['month_day_time'])\n",
        "\n",
        "ua_schedule = ua_schedule.sort_values(['tailnum', 'month_day_time'])\n",
        "\n",
        "# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n",
        "\n",
        "ua_schedule['time_gap'] = ua_schedule.groupby('tailnum')['month_day_time'].diff()\n",
        "\n",
        "# 값이 NaT인 경우, \n",
        "# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n",
        "\n",
        "# 간격을 시간(hour) 단위로 변경\n",
        "ua_schedule['gap_hours'] = ua_schedule['time_gap'].dt.total_seconds() / 3600\n",
        "\n",
        "# 3. 결과 확인\n",
        "ua_schedule['time_gap']\n",
        "\n",
        "# 4. 값 확인\n",
        "schedule_summary_ua = ua_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n",
        "\n",
        "schedule_summary_ua['count'].describe()\n",
        "\n",
        "schedule_summary_ua.dropna()\n",
        "\n",
        "schedule_summary_ua.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n",
        "\n",
        "top_planes_ua = schedule_summary_ua.sort_values('avg_gap_hr').head(10)\n",
        "\n",
        "# 좌석수 정보 병합\n",
        "top_planes_ua_with_seats = pd.merge(\n",
        "    top_planes_ua,\n",
        "    df_planes[['tailnum', 'seats']],\n",
        "    on='tailnum',\n",
        "    how='left'\n",
        ")\n",
        "\n",
        "######################################################################################\n",
        "# UA 비행기 회전율 시각화\n",
        "#############################################################################\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "barplot = sns.barplot(\n",
        "    data=top_planes_ua_with_seats,\n",
        "    x='tailnum',\n",
        "    y='avg_gap_hr',\n",
        "    color='#1f77b4'  # 파란색\n",
        ")\n",
        "\n",
        "plt.xticks(rotation=45, fontsize=12, fontweight='bold')\n",
        "plt.title('평균 비행 간격이 가장 짧은 10대 UA 항공기', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\n",
        "plt.grid(True)\n",
        "\n",
        "# 막대 위에 좌석 수 표시\n",
        "for i, row in top_planes_ua_with_seats.iterrows():\n",
        "    if pd.notna(row['seats']):\n",
        "        plt.text(\n",
        "            x=i,\n",
        "            y=row['avg_gap_hr'] + 0.2,\n",
        "            s=f\"{int(row['seats'])}석\",\n",
        "            ha='center',\n",
        "            va='bottom',\n",
        "            fontsize=12,\n",
        "            fontweight='bold'\n",
        "        )\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "5f2ad984",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "### B6"
      ],
      "id": "cb0816e8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# B6 기체 회전율\n",
        "\n",
        "# B6 항공사 중에서 tailnum, 출발 시간, 날짜 정보 추출\n",
        "b6_schedule = B6_total[['tailnum', 'month_day_time']].dropna()\n",
        "\n",
        "# 1. datetime 형식으로 먼저 변환\n",
        "b6_schedule['month_day_time'] = pd.to_datetime(b6_schedule['month_day_time'])\n",
        "\n",
        "b6_schedule = b6_schedule.sort_values(['tailnum', 'month_day_time'])\n",
        "\n",
        "# 2. tailnum 기준으로 시간 차이(diff) 계산 후, 이를 time_gap 이라는 새로운 column으로 추가\n",
        "b6_schedule['time_gap'] = b6_schedule.groupby('tailnum')['month_day_time'].diff()\n",
        "\n",
        "# 값이 NaT인 경우, \n",
        "# 앞쪽 값들 (NaT): 해당 tailnum 그룹에서 첫 비행 → 비교 대상 없음 → NaT\n",
        "\n",
        "# 간격을 시간(hour) 단위로 변경\n",
        "b6_schedule['gap_hours'] = b6_schedule['time_gap'].dt.total_seconds() / 3600\n",
        "\n",
        "# 3. 결과 확인\n",
        "b6_schedule['time_gap']\n",
        "\n",
        "# 4. 값 확인\n",
        "schedule_summary_b6 = b6_schedule.groupby('tailnum')['gap_hours'].agg(['mean', 'min', 'count']).reset_index().sort_values('count',ascending=False)\n",
        "\n",
        "schedule_summary_b6['count'].describe()\n",
        "\n",
        "schedule_summary_b6.dropna()\n",
        "\n",
        "schedule_summary_b6.columns = ['tailnum', 'avg_gap_hr', 'min_gap_hr', 'flight_count']\n",
        "\n",
        "top_planes_b6 = schedule_summary_b6.sort_values('avg_gap_hr').head(10)\n",
        "\n",
        "# 좌석수 정보 병합\n",
        "top_planes_b6_with_seats = pd.merge(\n",
        "    top_planes_b6,\n",
        "    df_planes[['tailnum', 'seats']],\n",
        "    on='tailnum',\n",
        "    how='left'\n",
        ")\n",
        "################################################################################################\n",
        "# B6 기체 회전율 시각화\n",
        "##########################################################################################\n",
        "\n",
        "plt.figure(figsize=(10, 5))\n",
        "barplot = sns.barplot(\n",
        "    data=top_planes_b6_with_seats,\n",
        "    x='tailnum',\n",
        "    y='avg_gap_hr',\n",
        "    color='#1f77b4'  # 파란색\n",
        ")\n",
        "\n",
        "plt.xticks(rotation=45, fontsize=12, fontweight='bold')\n",
        "plt.title('평균 비행 간격이 가장 짧은 10대 B6 항공기', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('항공기 꼬리 번호', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 비행 간격 (시간)', fontsize=14, fontweight='bold')\n",
        "plt.grid(True)\n",
        "\n",
        "# 막대 위에 좌석 수 표시\n",
        "for i, row in top_planes_b6_with_seats.iterrows():\n",
        "    if pd.notna(row['seats']):\n",
        "        plt.text(\n",
        "            x=i,\n",
        "            y=row['avg_gap_hr'] + 0.2,\n",
        "            s=f\"{int(row['seats'])}석\",\n",
        "            ha='center',\n",
        "            va='bottom',\n",
        "            fontsize=12,\n",
        "            fontweight='bold'\n",
        "        )\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "id": "10af4621",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "### 2. 단거리 위주의 항공사: 관제 순서 밀릴 가능성 有\n",
        "- JFK와 같은 장거리 위주의 공항에서 EV의 경우 소형 항공기이다 보니 관제 우선 순위에서 밀리는 경우가 많음<br>"
      ],
      "id": "a190ef15"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "origin_summary = flights_cleaned.groupby('origin')[['distance', 'air_time']].mean().reset_index()\n",
        "origin_summary \n",
        "# jfk 거리가 1222 lga는 872로 평균 거리차이가 있음\n",
        "# 시간도 171 , 127로 차이가 있음\n",
        "\n",
        "## 공항별 평균 거리와 비행시간 시각화\n",
        "plt.figure(figsize=(14, 5))\n",
        "\n",
        "# 색상 매핑 함수\n",
        "def get_color(airport):\n",
        "    if airport == 'JFK':\n",
        "        return '#2ca02c'  # 초록\n",
        "    elif airport == 'LGA':\n",
        "        return '#d62728'  # 빨강\n",
        "    else:\n",
        "        return '#1f77b4'  # 기본 파랑\n",
        "#####################################################################################\n",
        "\n",
        "# 1. 공항별 평균 거리 시각화\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "colors_dist = origin_summary['origin'].apply(get_color).tolist()\n",
        "sns.barplot(data=origin_summary, x='origin', y='distance', palette=colors_dist)\n",
        "plt.title('공항별 평균 거리 (마일)', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 거리 (마일)', fontsize=14, fontweight='bold')\n",
        "plt.xticks(fontsize=12, fontweight='bold')\n",
        "plt.yticks(fontsize=12)\n",
        "\n",
        "for i, val in enumerate(origin_summary['distance']):\n",
        "    plt.text(i, val + 10, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n",
        "\n",
        "###########################################################################################\n",
        "\n",
        "# 2. 공항별 평균 비행 시간 시각화\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "colors_time = origin_summary['origin'].apply(get_color).tolist()\n",
        "sns.barplot(data=origin_summary, x='origin', y='air_time', palette=colors_time)\n",
        "plt.title('공항별 평균 비행 시간 (분)', fontsize=16, fontweight='bold')\n",
        "plt.xlabel('출발 공항 코드', fontsize=14, fontweight='bold')\n",
        "plt.ylabel('평균 비행 시간 (분)', fontsize=14, fontweight='bold')\n",
        "plt.xticks(fontsize=12, fontweight='bold')\n",
        "plt.yticks(fontsize=12)\n",
        "\n",
        "for i, val in enumerate(origin_summary['air_time']):\n",
        "    plt.text(i, val + 2, f'{val:.1f}', ha='center', va='bottom', fontsize=12, fontweight='bold')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "12eb019d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "\n",
        "### 3. EV는 소형 항공기 주력이라서 대형 항공기에 비해 기상 영향을 많이 받음 <br>\n",
        "\n",
        ":::: {.columns}\n",
        "::: {.column width=\"33%\"}"
      ],
      "id": "30d2262d"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|echo: false\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "import pandas as pd\n",
        "import nycflights13 as flights\n",
        "\n",
        "# 항공편 데이터 (main dataset)\n",
        "df_flights = flights.flights\n",
        "df_airlines = flights.airlines\n",
        "df_airports = flights.airports\n",
        "df_planes = flights.planes\n",
        "df_weather = flights.weather\n",
        "\n",
        "# 결측치 제거\n",
        "flights_cleaned = df_flights.dropna(subset=['dep_time','dep_delay', 'arr_time','arr_delay','tailnum', 'air_time'])\n",
        "\n",
        "##월별로 고위험 날씨 조건이 발생한 비율\n",
        "\n",
        "# 월 컬럼 생성\n",
        "df_weather['time_hour'] = pd.to_datetime(df_weather['time_hour'], errors='coerce')\n",
        "df_weather['month'] = df_weather['time_hour'].dt.month\n",
        "\n",
        "# 고위험 조건 \n",
        "df_weather['high_risk'] = (\n",
        "    (df_weather['wind_gust'] >= 30) |\n",
        "    (df_weather['wind_speed'] >= 20) |\n",
        "    (df_weather['visib'] < 1)\n",
        ")\n",
        "\n",
        "# 결측치 제거\n",
        "df_weather_clean = df_weather.dropna(subset=['wind_gust', 'wind_speed', 'visib'])\n",
        "\n",
        "# 공항 × 월별 고위험 비율 계산\n",
        "risk_by_month_airport = (\n",
        "    df_weather_clean.groupby(['origin', 'month'])\n",
        "    .agg(\n",
        "        total_obs=('high_risk', 'count'),\n",
        "        high_risk_obs=('high_risk', 'sum')\n",
        "    )\n",
        "    .reset_index()\n",
        ")\n",
        "\n",
        "#비율 계산\n",
        "risk_by_month_airport['risk_ratio'] = (risk_by_month_airport['high_risk_obs'] / risk_by_month_airport['total_obs'] * 100).round(2)\n",
        "\n",
        "#출력\n",
        "\n",
        "\n",
        "##뉴욕 3개 공항에서 1~6월 동안 항공사별 월간운항 횟수\n",
        "# 1~6월 & 주요 항공사 & 주요 공항만 필터링\n",
        "top3_carriers = ['UA', 'B6', 'EV']\n",
        "filtered = flights_cleaned[\n",
        "    (flights_cleaned['carrier'].isin(top3_carriers)) &\n",
        "    (flights_cleaned['month'].between(1, 6)) &\n",
        "    (flights_cleaned['origin'].isin(['EWR', 'JFK', 'LGA']))\n",
        "]\n",
        "\n",
        "# 항공사별 × 공항별 × 월별 운항 수 집계\n",
        "monthly_airport_counts = (\n",
        "    filtered.groupby(['carrier', 'month', 'origin'])\n",
        "    .size()\n",
        "    .reset_index(name='flight_count')\n",
        ")\n",
        "\n",
        "# 피벗 테이블로 보기 좋게 정리\n",
        "pivot_table = monthly_airport_counts.pivot_table(\n",
        "    index=['carrier', 'month'],\n",
        "    columns='origin',\n",
        "    values='flight_count',\n",
        "    fill_value=0\n",
        ").astype(int)\n",
        "\n",
        "display(pivot_table.loc['EV'].style.set_caption(\"EV 항공사 상반기 월별 운항 수\"))\n",
        "\n",
        "# for carrier in pivot_table.index.get_level_values(0).unique():\n",
        "#     print(f\"\\n=== 항공사: {carrier} ===\")\n",
        "#     print(pivot_table.loc[carrier])"
      ],
      "id": "c82da192",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "::: \n",
        "\n",
        "::: {.column width=\"33%\"}"
      ],
      "id": "bde5101f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|echo: false\n",
        "display(pivot_table.loc['UA'].style.set_caption(\"UA 항공사 상반기 월별 운항 수\"))"
      ],
      "id": "4050b985",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"34%\"}"
      ],
      "id": "1d343b1a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#|echo: false\n",
        "display(pivot_table.loc['B6'].style.set_caption(\"B6 항공사 상반기 월별 운항 수\"))"
      ],
      "id": "342e72d2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "::::\n",
        "\n",
        "\n",
        "# 해결 방안 및 전략\n",
        "\n",
        "---\n",
        "\n",
        "1. 회전율 문제: 회전율이 낮은 기체 사용률 증가<br>\n",
        "\n",
        "2. 승무원 확충 및 점검 수시화 <br>\n",
        "안전정비 시급한 LCC - 출처 :<a href=\"https://www.mk.co.kr/news/business/11211160\" target=\"_blank\">https://www.mk.co.kr/news/business/11211160</a>\n",
        "\n",
        "3. 단거리 위주의 공항으로 항공편을 많이 배치 <br>\n",
        "<img src=\"./images/airport_loc.png\" alt=\"공항 이미지\" width=\"1000\">\n",
        "\n",
        "\n",
        "# Thank you"
      ],
      "id": "2e49531c"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\DS\\miniconda3\\envs\\project-0\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}